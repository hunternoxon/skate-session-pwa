const VERSION="0.4.0";const DEFAULT_TOGGLES={categories:{flips:true,grinds:true,manuals:true,airs:true},stances:{regular:true,fakie:true,nollie:true,switch:true},flips:{"kickflip":true,"heelflip":true,"varial kickflip":true,"varial heelflip":true,"hardflip":true,"inward heelflip":true,"bigspin flip":true,"bigspin heelflip":true,"tre flip":true,"360 flip":true,"laser flip":true},grinds:{"50-50":true,"5-0":true,"boardslide":true,"noseslide":true,"tailslide":true,"lipslide":true,"smith":true,"feeble":true,"willy":true,"salad":true,"crooked":true,"overcrook":true,"nosegrind":true,"noseblunt":true,"bluntslide":true},spins:{"180":true,"360":true,"540":true,"720":true},obstacles:["flat","ledge","rail","manual pad","quarterpipe","bank","kicker"]};function loadState(){try{return JSON.parse(localStorage.getItem("bl_state"))||DEFAULT_TOGGLES}catch{return DEFAULT_TOGGLES}}function saveState(e){localStorage.setItem("bl_state",JSON.stringify(e))}let STATE=loadState();const ALL_OBS=["flat","curb","ledge","flatbar","handrail","rail","hubba","kicker","gap","stair","quarterpipe","bank","mini ramp","funbox","manual pad","box"];const RULES={DIRECTION_DEFAULTS:{"50-50":"frontside","5-0":"frontside","boardslide":"backside","noseslide":"backside","lipslide":"frontside","tailslide":"frontside","bluntslide":"backside","nosegrind":"frontside","crooked":"backside","willy":"backside","feeble":"backside","smith":"backside","salad":"backside","overcrook":"backside","noseblunt":"frontside"},STANCES:["regular","switch","nollie","fakie"],DIRECTIONS:["frontside","backside"],SPINS:[180,360,540,720],FLIPS:["kickflip","heelflip","hardflip","inward heelflip","varial kickflip","varial heelflip","tre flip","360 flip","laser flip","bigspin flip","bigspin heelflip"],GRINDS_SLIDES:["50-50","5-0","boardslide","noseslide","tailslide","lipslide","smith","feeble","willy","salad","crooked","overcrook","nosegrind","noseblunt","bluntslide"],MANUALS:["manual","nose manual","one wheel manual"],OBSTACLES:ALL_OBS,GRIND_OK:new Set(["rail","handrail","flatbar","ledge","hubba"]),SLIDE_OK:new Set(["ledge","hubba","rail","handrail","flatbar","curb","box"]),MANUAL_OK:new Set(["manual pad","box","funbox","kicker","bank"]),AIR_OK:new Set(["flat","gap","kicker","quarterpipe","bank","stair","funbox"])};const BASE_POINTS={stance:{regular:0,fakie:.1,nollie:.2,switch:.3},spin:{180:.2,360:.4,540:.6,720:.8},flip:{"kickflip":.3,"heelflip":.35,"hardflip":.55,"inward heelflip":.6,"varial kickflip":.45,"varial heelflip":.5,"tre flip":.8,"360 flip":.8,"laser flip":.85,"bigspin flip":.6,"bigspin heelflip":.65},grind_slide:{"50-50":.3,"5-0":.4,boardslide:.4,noseslide:.45,tailslide:.5,lipslide:.55,smith:.65,feeble:.65,willy:.55,salad:.6,crooked:.65,overcrook:.75,nosegrind:.7,noseblunt:.9,bluntslide:.85},obstacle:{flat:0,"manual pad":.1,box:.1,curb:.15,ledge:.25,hubba:.35,flatbar:.35,rail:.45,handrail:.55,gap:.5,kicker:.1,stair:.45,quarterpipe:.4,bank:.25,funbox:.2,"mini ramp":.3},manual:{manual:.25,"nose manual":.35,"one wheel manual":.6}},COMBO_BONUSES={spin_plus_flip:.2,flip_into_grind:.25,spin_into_grind:.15,manual_combo:.15};function isValidCombo(e){const n=e.grind_slide,t=e.manual,a=e.obstacle,i=e.flip;if(n){const e=["boardslide","lipslide","tailslide","noseslide","bluntslide"].includes(n);if(!a)return!1;if(e&&!RULES.SLIDE_OK.has(a))return!1;if(!e&&!(RULES.GRIND_OK.has(a)||RULES.SLIDE_OK.has(a)))return!1}if(t&&a&&!RULES.MANUAL_OK.has(a))return!1;if(i&&!n&&!t&&a&&!RULES.AIR_OK.has(a))return!1;return!0}function baseScore(e){let n=1,t=[];const a=e.stance||"regular";n+=BASE_POINTS.stance[a]||0,t.push(["stance",a,BASE_POINTS.stance[a]||0]),e.spin&&(n+=BASE_POINTS.spin[e.spin]||0,t.push(["spin",e.spin,BASE_POINTS.spin[e.spin]||0])),e.flip&&(n+=BASE_POINTS.flip[e.flip]||0,t.push(["flip",e.flip,BASE_POINTS.flip[e.flip]||0])),e.grind_slide&&(n+=BASE_POINTS.grind_slide[e.grind_slide]||0,t.push(["grind_slide",e.grind_slide,BASE_POINTS.grind_slide[e.grind_slide]||0])),e.manual&&(n+=BASE_POINTS.manual[e.manual]||0,t.push(["manual",e.manual,BASE_POINTS.manual[e.manual]||0])),e.obstacle&&(n+=BASE_POINTS.obstacle[e.obstacle]||0,t.push(["obstacle",e.obstacle,BASE_POINTS.obstacle[e.obstacle]||0]));let i=0;return e.spin&&e.flip&&(i+=COMBO_BONUSES.spin_plus_flip),e.flip&&e.grind_slide&&(i+=COMBO_BONUSES.flip_into_grind),e.spin&&e.grind_slide&&(i+=COMBO_BONUSES.spin_into_grind),e.manual&&(e.flip||e.spin)&&(i+=COMBO_BONUSES.manual_combo),n*=1+i,{score:Math.max(n,.1),breakdown:t,combo:1+i}}function landMultiplier(e){return{1:1,2:.94,3:.92}[e]||0}function computeScore(e,n){if(!isValidCombo(e))return{valid:!1,base:0,combo:1,attempt:0,final:0,breakdown:[]};const{score:t,breakdown:a,combo:i}=baseScore(e),o=landMultiplier(n);return{valid:!0,base:round(t,3),combo:round(i,3),attempt:o,final:round(t*o,3),breakdown:a}}function round(e,n){const t=Math.pow(10,n);return Math.round(e*t)/t}function tier(e){return Math.max(1,Math.min(10,e|0))}const SCORE_CAP={1:1.9,2:2.2,3:2.5,4:2.9,5:3.3,6:3.7,7:4.1,8:4.6,9:5.3,10:6};function scoreCapFor(e){return SCORE_CAP[tier(e)]}function allowFlip(e,n){const t=["tre flip","360 flip","laser flip","bigspin heelflip","hardflip","inward heelflip"],a=["varial kickflip","varial heelflip","bigspin flip"];if(n<=1)return["kickflip","heelflip"].includes(e);if(n<=2)return!t.includes(e)&&!a.includes(e);if(n<=4)return!t.includes(e);if(5===n)return!["laser flip"].includes(e);if(n<=7)return!0;if(9===n)return!["kickflip","heelflip"].includes(e);return!0}function allowGrindSlide(e,n){const t=["overcrook","noseblunt","bluntslide"];if(n<=1)return["50-50","boardslide","5-0","noseslide","tailslide"].includes(e);if(n<=2)return!t.includes(e)&&!["smith","feeble","overcrook"].includes(e);if(n<=4)return!t.includes(e)||"overcrook"===e;if(9===n)return t.includes(e)||["crooked","nosegrind","5-0"].includes(e);return!0}function allowSpin(e,n){if(n<=2)return e<=180;if(n<=4)return e<=360;if(n<=7)return e<=540;if(8===n)return e<=720;return!0}function stanceEnabled(e){return!!STATE.stances[e]}function stanceChoicePool(e){const n=["regular","fakie","nollie","switch"].filter(stanceEnabled);return e<=2?n.filter(e=>"switch"!==e):n}function pickObstacle(e){const n=(e&&e.length?e:STATE.obstacles).filter(e=>ALL_OBS.includes(e));return n.length?n[Math.floor(Math.random()*n.length)]:"flat"}const HISTORY_WINDOW=7,DUPLICATE_THRESHOLD=.82;let _recent=[];function pushRecent(e){_recent.unshift(e),_recent.length>HISTORY_WINDOW&&_recent.pop()}function similarity(e,n){const t=["stance","spin","flip","grind_slide","direction","manual","obstacle"];let a=0;for(const i of t)((!e[i]&&!n[i]||e[i]&&n[i]&&String(e[i])===String(n[i]))&&(a+=1));return a/t.length}function notTooSimilar(e){for(const n of _recent)if(similarity(e,n)>=DUPLICATE_THRESHOLD)return!1;return!0}function weightedChoice(e){const n=e.reduce(((e,[,n])=>e+n),0);let t=Math.random()*n;for(const[a,i]of e)if((t-=i)<=0)return a;return e[e.length-1][0]}function generateTrick(e,n){const t=tier(e),a=pickObstacle(n),i={stance:null,spin:null,spin_dir:null,flip:null,grind_slide:null,direction:null,manual:null,obstacle:a,extras:[]};if(Math.random()<.1+.04*t){const e=stanceChoicePool(t),n=Math.floor(Math.random()*e.length),a=e[n];i.stance="regular"===a?null:a}if(!1!==STATE.categories.spins&&Math.random()<.14+.05*t){const e=[180,360,540,720].filter((e=>STATE.spins[String(e)]&&allowSpin(e,t)));e.length&&(i.spin=e[Math.floor(Math.random()*e.length)],Math.random()<.6&&(i.spin_dir=RULES.DIRECTIONS[Math.floor(Math.random()*2)]))}!1!==STATE.categories.flips&&Math.random()<.24+.05*t&&function(){let e=RULES.FLIPS.filter((e=>STATE.flips[e]&&allowFlip(e,t)));e.length&&(i.flip=e[Math.floor(Math.random()*e.length)])}();const o=RULES.GRIND_OK.has(a)||RULES.SLIDE_OK.has(a),s=RULES.MANUAL_OK.has(a),l=RULES.AIR_OK.has(a);if(o&&!1!==STATE.categories.grinds&&Math.random()<.24+.04*t){const e=RULES.GRINDS_SLIDES.filter((e=>STATE.grinds[e]&&allowGrindSlide(e,t)));e.length&&(i.grind_slide=e[Math.floor(Math.random()*e.length)],i.direction=RULES.DIRECTION_DEFAULTS[i.grind_slide]||"frontside")}else if(s&&!1!==STATE.categories.manuals&&Math.random()<.18+.03*t){const e=RULES.MANUALS;i.manual=e[Math.floor(Math.random()*e.length)]}else l&&!1!==STATE.categories.flips&&!i.flip&&Math.random()<.38+.05*t&&function(){const e=["kickflip","heelflip","varial kickflip"].filter((e=>STATE.flips[e]&&allowFlip(e,t)));t>=7&&STATE.flips["tre flip"]&&e.push("tre flip"),e.length&&(i.flip=e[Math.floor(Math.random()*e.length)])}();if(!i.flip&&!i.grind_slide&&!i.manual)if(RULES.AIR_OK.has(a)&&!1!==STATE.categories.flips)i.flip=["kickflip","heelflip"][Math.floor(2*Math.random())]||"kickflip";else if((RULES.GRIND_OK.has(a)||RULES.SLIDE_OK.has(a))&&!1!==STATE.categories.grinds){const e=RULES.GRINDS_SLIDES.filter((e=>STATE.grinds[e]&&allowGrindSlide(e,t)));e.length&&(i.grind_slide=e[Math.floor(Math.random()*e.length)],i.direction=RULES.DIRECTION_DEFAULTS[i.grind_slide]||"frontside")}else RULES.MANUAL_OK.has(a)&&!1!==STATE.categories.manuals&&(i.manual="manual");for(let e=0;e<8&&(!isValidCombo(i)||!underScoreCap(i)||!notTooSimilar(i));e++)if(isValidCombo(i))!underScoreCap(i)&&(i.spin&&Math.random()<.5?(i.spin=null,i.spin_dir=null):i.flip?i.flip=null:i.grind_slide&&(i.grind_slide=null,i.direction=null)),!notTooSimilar(i)&&(i.spin=null,i.spin_dir=null,Math.random()<.5&&(i.flip=null),Math.random()<.5&&(i.grind_slide=null,i.direction=null));else if(i.grind_slide&&!(RULES.GRIND_OK.has(i.obstacle)||RULES.SLIDE_OK.has(i.obstacle))){const e=Array.from(new Set([...RULES.GRIND_OK,...RULES.SLIDE_OK])).filter((e=>STATE.obstacles.includes(e)));i.obstacle=e.length?e[Math.floor(Math.random()*e.length)]:i.obstacle}else if(i.manual&&!RULES.MANUAL_OK.has(i.obstacle)){const e=Array.from(RULES.MANUAL_OK).filter((e=>STATE.obstacles.includes(e)));i.obstacle=e.length?e[Math.floor(Math.random()*e.length)]:i.obstacle}else if(i.flip&&!i.grind_slide&&!i.manual&&!RULES.AIR_OK.has(i.obstacle)){const e=Array.from(RULES.AIR_OK).filter((e=>STATE.obstacles.includes(e)));i.obstacle=e.length?e[Math.floor(Math.random()*e.length)]:i.obstacle}else i.manual?i.manual=null:i.grind_slide?(i.grind_slide=null,i.direction=null):i.flip&&(i.flip=null);return i.spin||(i.spin_dir=null),pushRecent(i),i}function describe(e){const n=e.obstacle&&["rail","handrail","flatbar"].includes(e.obstacle),t=[];return e.flip&&!e.grind_slide&&!e.manual&&n?(t.push(e.flip,"over",e.obstacle),t.join(" ")):(e.stance&&"regular"!==e.stance&&t.push(e.stance),e.spin&&t.push(e.spin_dir?`${e.spin_dir} ${e.spin}`:`${e.spin}`),e.flip&&t.push(e.flip),e.direction&&e.grind_slide?t.push(`${e.direction} ${e.grind_slide}`):e.grind_slide&&t.push(e.grind_slide),e.manual&&t.push(e.manual),e.obstacle&&t.push(`on ${e.obstacle}`),t.join(" "))}const els={skill:document.getElementById("skill"),skillVal:document.getElementById("skillVal"),startBtn:document.getElementById("startBtn"),gameCard:document.getElementById("gameCard"),setupCard:document.getElementById("setupCard"),overCard:document.getElementById("overCard"),trick:document.getElementById("trick"),letters:document.getElementById("letters"),landBtn:document.getElementById("landBtn"),missBtn:document.getElementById("missBtn"),skipBtn:document.getElementById("skipBtn"),nextBtn:document.getElementById("nextBtn"),endBtn:document.getElementById("endBtn"),attempt:document.getElementById("attempt"),score:document.getElementById("score"),finalScore:document.getElementById("finalScore"),bestScore:document.getElementById("bestScore"),restartBtn:document.getElementById("restartBtn"),breakdown:document.getElementById("breakdown"),breakText:document.getElementById("breakText"),feedbackBtn:document.getElementById("feedbackBtn"),settingsBtn:document.getElementById("settingsBtn"),settingsModal:document.getElementById("settingsModal"),settingsSave:document.getElementById("settingsSave"),settingsClose:document.getElementById("settingsClose"),moreBtn:document.getElementById("moreBtn"),obsChips:document.getElementById("obsChips"),catChips:document.getElementById("catChips"),stanceChips:document.getElementById("stanceChips"),obsNames:document.getElementById("obsNames"),editObs:document.getElementById("editObs")};function renderObsSummary(){els.obsNames.textContent=STATE.obstacles&&STATE.obstacles.length?STATE.obstacles.join(", "):"—"}els.skill.addEventListener("input",(e=>{els.skillVal.textContent=e.target.value})),renderObsSummary();function renderObsChips(){const e=ALL_OBS;els.obsChips.innerHTML=e.map((e=>`<button data-o="${e}" class="${STATE.obstacles.includes(e)?"active":""}">${e}</button>`)).join(""),els.obsChips.querySelectorAll("button").forEach((e=>{e.onclick=()=>{const n=e.dataset.o;STATE.obstacles=STATE.obstacles.includes(n)?STATE.obstacles.filter((e=>e!==n)):STATE.obstacles.concat([n]),renderObsChips()}}))}function renderCatChips(){const e=[["flips","Flips"],["grinds","Grinds/Slides"],["manuals","Manuals"],["airs","Airs"]];els.catChips.innerHTML=e.map((([e,n])=>`<button data-k="${e}" class="${STATE.categories[e]?"active":""}">${n}</button>`)).join(""),els.catChips.querySelectorAll("button").forEach((e=>{e.onclick=()=>{const n=e.dataset.k;STATE.categories[n]=!STATE.categories[n],renderCatChips()}}))}function renderStanceChips(){const e=["regular","fakie","nollie","switch"];els.stanceChips.innerHTML=e.map((e=>`<button data-k="${e}" class="${STATE.stances[e]?"active":""}">${e}</button>`)).join(""),els.stanceChips.querySelectorAll("button").forEach((e=>{e.onclick=()=>{const n=e.dataset.k;STATE.stances[n]=!STATE.stances[n],renderStanceChips()}}))}function renderSettings(){renderObsChips(),renderCatChips(),renderStanceChips();const e=els.settingsModal,n=e.querySelector(".panel.flips"),t=e.querySelector(".panel.grinds"),a=e.querySelector(".panel.spins");n.innerHTML=Object.keys(STATE.flips).map((e=>labelBox("flips",e,STATE.flips[e]))).join(""),t.innerHTML=Object.keys(STATE.grinds).map((e=>labelBox("grinds",e,STATE.grinds[e]))).join(""),a.innerHTML=Object.keys(STATE.spins).map((e=>labelBox("spins",e,STATE.spins[e]))).join(""),e.querySelectorAll(".tab").forEach((n=>{n.onclick=()=>{e.querySelectorAll(".tab").forEach((e=>e.classList.remove("active"))),n.classList.add("active"),e.querySelectorAll(".panel").forEach((e=>e.classList.add("hidden"))),e.querySelector(`.panel.${n.dataset.tab}`).classList.remove("hidden")}}))}function labelBox(e,n,t){return`<label><input type="checkbox" data-group="${e}" data-key="${n}" ${t?"checked":""}/> ${n}</label>`}els.settingsBtn.addEventListener("click",(()=>{renderSettings(),els.settingsModal.classList.remove("hidden")})),els.settingsClose.addEventListener("click",(()=>els.settingsModal.classList.add("hidden"))),els.settingsSave.addEventListener("click",(()=>{document.querySelectorAll("#settingsModal input[type=checkbox]").forEach((e=>{const n=e.dataset.group,t=e.dataset.key;STATE[n][t]=e.checked})),saveState(STATE),renderObsSummary(),els.settingsModal.classList.add("hidden")})),els.editObs.addEventListener("click",(()=>{renderSettings(),els.settingsModal.classList.remove("hidden")}));let misses=0,total=0,current=null,currentSkill=6,allowed=[],attempt=1;function startSession(){currentSkill=parseInt(els.skill.value,10),allowed=STATE.obstacles&&STATE.obstacles.length?STATE.obstacles.slice():DEFAULT_TOGGLES.obstacles.slice(),misses=0,total=0,attempt=1,els.score.textContent=total.toFixed(2),els.setupCard.classList.add("hidden"),els.gameCard.classList.remove("hidden"),updateLetters(),nextTrick(!0)}function nextTrick(e=!1){attempt=1,els.attempt.textContent=attempt,current=generateTrick(currentSkill,allowed),els.trick.textContent=describe(current),els.breakdown.open=!1,els.nextBtn.classList.add("hidden"),els.landBtn.disabled=!1,els.missBtn.disabled=!1,els.skipBtn.disabled=!1,e||window.scrollTo({top:document.body.scrollHeight,behavior:"smooth"})}function settle(e){if(e){const e=computeScore(current,attempt);total+=e.final,els.score.textContent=total.toFixed(2),els.breakText.textContent=prettyScore(e),els.breakdown.open=!0,els.nextBtn.classList.remove("hidden"),els.landBtn.disabled=!0,els.missBtn.disabled=!0,els.skipBtn.disabled=!0}else attempt<3?(attempt++,els.attempt.textContent=attempt):(misses++,updateLetters(),misses>=5?endSession():(els.nextBtn.classList.remove("hidden"),els.landBtn.disabled=!0,els.missBtn.disabled=!0,els.skipBtn.disabled=!0))}function endSession(){els.gameCard.classList.add("hidden"),els.overCard.classList.remove("hidden"),els.finalScore.textContent=total.toFixed(2);const e=Math.max(total,parseFloat(localStorage.getItem("bl_best")||"0"));localStorage.setItem("bl_best",String(e)),els.bestScore.textContent=e.toFixed(2)}function updateLetters(){const e="SKATE".split("").map(((e,n)=>n<misses?`[${e}]`:e)).join(" ");els.letters.textContent=e}function prettyScore(e){if(!e.valid)return"Invalid combo for obstacle.";let n=[`Base: ${e.base}`,`Combo x${e.combo}`,`Attempt x${e.attempt} => Final: ${e.final}`,"","Breakdown:"];for(const[t,a,i]of e.breakdown)n.push(`  + ${t}:${a} = ${i}`);return n.join("\n")}els.startBtn.addEventListener("click",startSession),els.landBtn.addEventListener("click",(()=>settle(!0))),els.missBtn.addEventListener("click",(()=>settle(!1))),els.skipBtn.addEventListener("click",(()=>{els.nextBtn.classList.add("hidden"),nextTrick(!1)})),els.nextBtn.addEventListener("click",(()=>nextTrick(!1))),els.endBtn.addEventListener("click",endSession);els.feedbackBtn.addEventListener("click",(()=>{const e=prompt("Drop feedback here:");if(!e)return;const n=JSON.parse(localStorage.getItem("bl_feedback")||"[]");n.push({note:e,at:Date.now(),score:total,version:VERSION}),localStorage.setItem("bl_feedback",JSON.stringify(n)),alert("Saved locally. You can export later.")}));const RESET_PASS="sk8-reset-2025";els.moreBtn.addEventListener("click",(async()=>{const e=prompt("More:\n- Type 'reset' to clear best score\n- Type 'clear' to clear cache & reload");if(!e)return;if("reset"===e.toLowerCase()){const e=prompt("Password to reset:");e===RESET_PASS?(localStorage.removeItem("bl_best"),alert("Best score reset.")):alert("Nope.")}"clear"===e.toLowerCase()&&await async function(){const e=await caches.keys();await Promise.all(e.map((e=>caches.delete(e)))),alert("Cache cleared. Reloading…"),location.reload(!0)}()})),'serviceWorker'in navigator&&window.addEventListener("load",(()=>navigator.serviceWorker.register("./sw.js"))),console.log("Brainlock loaded",VERSION);