const VERSION="0.5.0";
const DEFAULTS={categories:{flips:true,grinds:true,manuals:true,airs:true,spins:true},stances:{regular:true,fakie:true,nollie:true,switch:true},flips:{"kickflip":true,"heelflip":true,"varial kickflip":true,"varial heelflip":true,"hardflip":true,"inward heelflip":true,"bigspin flip":true,"bigspin heelflip":true,"tre flip":true,"360 flip":true,"laser flip":true},grinds:{"50-50":true,"5-0":true,"boardslide":true,"noseslide":true,"tailslide":true,"lipslide":true,"smith":true,"feeble":true,"willy":true,"salad":true,"crooked":true,"overcrook":true,"nosegrind":true,"noseblunt":true,"bluntslide":true},spins:{"180":true,"360":true,"540":true,"720":true},obstacles:["flat","ledge","rail","manual pad","quarterpipe","bank","kicker"]};
function loadState(){try{return JSON.parse(localStorage.getItem('bl_state'))||DEFAULTS;}catch{return DEFAULTS;}}function saveState(s){localStorage.setItem('bl_state',JSON.stringify(s));}
let STATE=loadState();
const ALL_OBS=["flat","curb","ledge","flatbar","handrail","rail","hubba","kicker","gap","stair","quarterpipe","bank","mini ramp","funbox","manual pad","box"];
const RULES={DIRECTION_DEFAULTS:{"50-50":"frontside","5-0":"frontside","boardslide":"backside","noseslide":"backside","lipslide":"frontside","tailslide":"frontside","bluntslide":"backside","nosegrind":"frontside","crooked":"backside","willy":"backside","feeble":"backside","smith":"backside","salad":"backside","overcrook":"backside","noseblunt":"frontside"},FLIPS:["kickflip","heelflip","hardflip","inward heelflip","varial kickflip","varial heelflip","tre flip","360 flip","laser flip","bigspin flip","bigspin heelflip"],GRINDS_SLIDES:["50-50","5-0","boardslide","noseslide","tailslide","lipslide","smith","feeble","willy","salad","crooked","overcrook","nosegrind","noseblunt","bluntslide"],MANUALS:["manual","nose manual","one wheel manual"],GRIND_OK:new Set(["rail","handrail","flatbar","ledge","hubba"]),SLIDE_OK:new Set(["ledge","hubba","rail","handrail","flatbar","curb","box"]),MANUAL_OK:new Set(["manual pad","box","funbox","kicker","bank"]),AIR_OK:new Set(["flat","gap","kicker","quarterpipe","bank","stair","funbox"])};
const BASE_POINTS={stance:{regular:0,fakie:0.1,nollie:0.25,switch:0.45},spin:{180:0.15,360:0.4,540:0.75,720:1.0},flip:{"kickflip":0.20,"heelflip":0.22,"varial kickflip":0.45,"varial heelflip":0.50,"hardflip":0.70,"inward heelflip":0.75,"bigspin flip":0.70,"bigspin heelflip":0.80,"tre flip":1.10,"360 flip":1.10,"laser flip":1.25},grind_slide:{"50-50":0.35,"5-0":0.45,"boardslide":0.45,"noseslide":0.5,"tailslide":0.55,"lipslide":0.6,"smith":0.85,"feeble":0.9,"willy":0.65,"salad":0.7,"crooked":0.85,"overcrook":0.95,"nosegrind":0.85,"noseblunt":1.20,"bluntslide":1.10},obstacle:{"flat":0,"manual pad":0.1,"box":0.1,"curb":0.2,"ledge":0.35,"hubba":0.55,"flatbar":0.45,"rail":0.55,"handrail":0.85,"gap":0.6,"kicker":0.15,"stair":0.6,"quarterpipe":0.45,"bank":0.35,"funbox":0.25,"mini ramp":0.35},manual:{"manual":0.30,"nose manual":0.45,"one wheel manual":0.80}};
const COMBO_BONUSES={spin_plus_flip:0.25,flip_into_grind:0.35,spin_into_grind:0.2,manual_combo:0.2};
function attemptMult(a){return a===1?1.00:(a===2?0.85:0.75);}
function tier(s){return Math.max(1,Math.min(10,s|0));}
const SCORE_CAP={1:2.2,2:2.5,3:3.0,4:3.6,5:4.2,6:4.8,7:5.5,8:6.5,9:7.6,10:9.0};
function scoreCapFor(s){return SCORE_CAP[tier(s)];}
function allowFlip(n,s){const hi=["tre flip","360 flip","laser flip","bigspin heelflip","hardflip","inward heelflip"];const mid=["varial kickflip","varial heelflip","bigspin flip"];if(s<=1)return["kickflip","heelflip"].includes(n);if(s<=2)return!hi.includes(n)&&!mid.includes(n);if(s<=4)return!hi.includes(n);if(s===5)return n!=="laser flip";if(s===9)return!["kickflip","heelflip"].includes(n);return true;}
function allowGrindSlide(n,s){const high=["overcrook","noseblunt","bluntslide"];if(s<=1)return["50-50","boardslide","5-0","noseslide","tailslide"].includes(n);if(s<=2)return!high.includes(n)&&!["smith","feeble","overcrook"].includes(n);if(s<=4)return!high.includes(n)||n==="overcrook";if(s===9)return high.includes(n)||["crooked","nosegrind","5-0"].includes(n);return true;}
function allowSpin(spin,s){if(s<=2)return spin<=180;if(s<=4)return spin<=360;if(s<=7)return spin<=540;if(s===8)return spin<=720;return true;}
function stancePool(s){const p=Object.keys(STATE.stances).filter(k=>STATE.stances[k]);return s<=2?p.filter(x=>x!=="switch"):p;}
let currentSkill=6;function underScoreCap(c){const r=computeScore(c,1);return r.base<=scoreCapFor(currentSkill||6);}function anyEnabled(o){return Object.values(o).some(v=>!!v);}function effectiveCategoryEnabled(cat){if(!STATE.categories[cat])return false;if(cat==="flips")return anyEnabled(STATE.flips);if(cat==="grinds")return anyEnabled(STATE.grinds);if(cat==="spins")return anyEnabled(STATE.spins);if(cat==="manuals"||cat==="airs")return true;return true;}
const HISTORY_WINDOW=7,DUPLICATE_THRESHOLD=0.82;let _recent=[];function pushRecent(c){_recent.unshift(c);if(_recent.length>HISTORY_WINDOW)_recent.pop();}
function similarity(a,b){const k=["stance","spin","flip","grind_slide","direction","manual","obstacle"];let same=0;for(const x of k){if((!a[x]&&!b[x])||(a[x]&&b[x]&&String(a[x])===String(b[x])))same++;}return same/k.length;}
function notTooSimilar(c){for(const p of _recent){if(similarity(c,p)>=DUPLICATE_THRESHOLD)return false;}return true;}
function pickObstacle(){const src=(STATE.obstacles&&STATE.obstacles.length?STATE.obstacles:DEFAULTS.obstacles).filter(o=>ALL_OBS.includes(o));return src.length?src[Math.floor(Math.random()*src.length)]:"flat";}
function isRail(ob){return["rail","handrail","flatbar"].includes(ob);}
function isValidCombo(c){const g=c.grind_slide,m=c.manual,ob=c.obstacle,fl=c.flip;if(g){const isSlide=["boardslide","lipslide","tailslide","noseslide","bluntslide"].includes(g);if(!ob)return false;if(isSlide&&!RULES.SLIDE_OK.has(ob))return false;if(!isSlide&&!(RULES.GRIND_OK.has(ob)||RULES.SLIDE_OK.has(ob)))return false;}if(m){if(ob&&!RULES.MANUAL_OK.has(ob))return false;}if(fl&&!g&&!m&&ob){if(!(RULES.AIR_OK.has(ob)||isRail(ob)))return false;}return true;}
function prefilterPools(s,ob){const pools={};pools.stances=stancePool(s);pools.spins=[180,360,540,720].filter(x=>STATE.spins[String(x)]&&allowSpin(x,s));pools.flips=RULES.FLIPS.filter(n=>STATE.flips[n]&&allowFlip(n,s));pools.grinds=RULES.GRINDS_SLIDES.filter(n=>STATE.grinds[n]&&allowGrindSlide(n,s));pools.canGrindish=(RULES.GRIND_OK.has(ob)||RULES.SLIDE_OK.has(ob))&&effectiveCategoryEnabled("grinds");pools.canManual=RULES.MANUAL_OK.has(ob)&&effectiveCategoryEnabled("manuals");pools.canAirish=(RULES.AIR_OK.has(ob)||isRail(ob))&&effectiveCategoryEnabled("airs");pools.allowFlips=effectiveCategoryEnabled("flips");return pools;}
function generateTrick(skill){const s=tier(skill);let c=null;for(let tries=0;tries<40;tries++){const ob=pickObstacle();const P=prefilterPools(s,ob);const patterns=[];if(P.canGrindish)patterns.push("flipToGrind","grindOnly");if(P.canManual)patterns.push("manualOnly");if(P.canAirish&&P.allowFlips)patterns.push("flipOnly");if(!patterns.length&&P.allowFlips)patterns.push("flipOnly");if(!patterns.length)patterns.push("grindOnly");const pat=patterns[Math.floor(Math.random()*patterns.length)];const res={stance:null,spin:null,spin_dir:null,flip:null,grind_slide:null,direction:null,manual:null,obstacle:ob};if(Math.random()<(0.10+0.04*s)&&P.stances.length){const st=P.stances[Math.floor(Math.random()*P.stances.length)];res.stance=(st==="regular"?null:st);}if(P.spins.length&&Math.random()<(0.14+0.05*s)){res.spin=P.spins[Math.floor(Math.random()*P.spins.length)];if(Math.random()<0.6)res.spin_dir=(Math.random()<0.5?"frontside":"backside");}
if(pat==="flipToGrind"&&P.flips.length&&P.grinds.length){res.flip=P.flips[Math.floor(Math.random()*P.flips.length)];res.grind_slide=P.grinds[Math.floor(Math.random()*P.grinds.length)];res.direction=RULES.DIRECTION_DEFAULTS[res.grind_slide]||"frontside";}
else if(pat==="grindOnly"&&P.grinds.length){res.grind_slide=P.grinds[Math.floor(Math.random()*P.grinds.length)];res.direction=RULES.DIRECTION_DEFAULTS[res.grind_slide]||"frontside";}
else if(pat==="manualOnly"){res.manual="manual";}
else if(pat==="flipOnly"&&P.flips.length){res.flip=P.flips[Math.floor(Math.random()*P.flips.length)];}
res.obstacle=ob;if(!res.flip&&!res.grind_slide&&!res.manual){if(P.allowFlips)res.flip=STATE.flips["kickflip"]?"kickflip":(STATE.flips["heelflip"]?"heelflip":null);}if(!res.flip&&!res.grind_slide&&!res.manual){res.obstacle=RULES.AIR_OK.has(ob)?ob:"flat";res.flip="kickflip";}
if(isValidCombo(res)&&underScoreCap(res)&&notTooSimilar(res)){c=res;break;}}if(!c){c={stance:null,spin:null,spin_dir:null,flip:"kickflip",grind_slide:null,direction:null,manual:null,obstacle:"flat"};}if(!c.spin)c.spin_dir=null;pushRecent(c);return c;}
function describe(c){const isRailObs=["rail","handrail","flatbar"].includes(c.obstacle);const parts=[];if(c.flip&&!c.grind_slide&&!c.manual&&isRailObs){parts.push(c.flip,"over",c.obstacle);return parts.join(" ");}if(c.stance&&c.stance!=="regular")parts.push(c.stance);if(c.spin){parts.push(c.spin_dir?`${c.spin_dir} ${c.spin}`:`${c.spin}`);}if(c.flip)parts.push(c.flip);if(c.direction&&c.grind_slide)parts.push(`${c.direction} ${c.grind_slide}`);else if(c.grind_slide)parts.push(c.grind_slide);if(c.manual)parts.push(c.manual);if(c.obstacle)parts.push(`on ${c.obstacle}`);return parts.join(" ");}
const els={titleText:document.getElementById('titleText'),skill:document.getElementById('skill'),skillVal:document.getElementById('skillVal'),sheet:document.getElementById('sheet'),viewSetup:document.getElementById('viewSetup'),viewGame:document.getElementById('viewGame'),viewOver:document.getElementById('viewOver'),startBtn:document.getElementById('startBtn'),trickBox:document.getElementById('trick'),trickText:document.getElementById('trickText'),landBtn:document.getElementById('landBtn'),missBtn:document.getElementById('missBtn'),skipBtn:document.getElementById('skipBtn'),nextBtn:document.getElementById('nextBtn'),endBtn:document.getElementById('endBtn'),finalScore:document.getElementById('finalScore'),bestScore:document.getElementById('bestScore'),restartBtn:document.getElementById('restartBtn'),settingsBtn:document.getElementById('settingsBtn'),settingsModal:document.getElementById('settingsModal'),obsChips:document.getElementById('obsChips'),catChips:document.getElementById('catChips'),stanceChips:document.getElementById('stanceChips'),obsNames:document.getElementById('obsNames'),stanceNames:document.getElementById('stanceNames'),trickSummary:document.getElementById('trickSummary'),editObs:document.getElementById('editObs'),editStance:document.getElementById('editStance'),editTricks:document.getElementById('editTricks'),letters:document.getElementById('letters'),scoreTop:document.getElementById('scoreTop'),scoreLabel:document.getElementById('scoreLabel'),attemptBadge:document.getElementById('attemptBadge'),attemptPoints:document.getElementById('attemptPoints'),previewTray:document.getElementById('previewTray'),collapsePreview:document.getElementById('collapsePreview'),breakModal:document.getElementById('breakModal'),breakText:document.getElementById('breakText'),breakClose:document.getElementById('breakClose')};
els.titleText.addEventListener('click',()=>location.reload());els.skill.addEventListener('input',e=>{els.skillVal.textContent=e.target.value;});
els.collapsePreview.addEventListener('click',()=>{const collapsed=els.previewTray.classList.toggle('collapsed');els.collapsePreview.textContent=collapsed?"▼":"▲";els.collapsePreview.setAttribute('aria-expanded',String(!collapsed));});
function labelBox(group,key,checked,enabled){const dis=enabled?"":"disabled";const id=`${group}-${key}`.replace(/\s+/g,'-');return `<label><input id="${id}" type="checkbox" data-group="${group}" data-key="${key}" ${checked?'checked':''} ${dis}/> ${key}</label>`;}
function openSettings(){renderObsChips();renderStanceChips();renderCatChips();renderTrickPanels();els.settingsModal.classList.remove('hidden');}
function closeSettings(){els.settingsModal.classList.add('hidden');}
els.settingsBtn.addEventListener('click',openSettings);document.getElementById('settingsClose').addEventListener('click',closeSettings);els.settingsModal.addEventListener('click',(e)=>{if(e.target===els.settingsModal)closeSettings();});
function renderObsChips(){const pool=ALL_OBS;els.obsChips.innerHTML=pool.map(o=>`<button data-o="${o}" class="${STATE.obstacles.includes(o)?'active':''}">${o}</button>`).join('');els.obsChips.querySelectorAll('button').forEach(b=>{b.onclick=()=>{const o=b.dataset.o;STATE.obstacles=STATE.obstacles.includes(o)?STATE.obstacles.filter(x=>x!==o):STATE.obstacles.concat([o]);renderObsChips();renderObsSummary();saveState(STATE);};});}
function renderStanceChips(){const keys=["regular","fakie","nollie","switch"];els.stanceChips.innerHTML=keys.map(k=>`<button data-k="${k}" class="${STATE.stances[k]?'active':''}">${k}</button>`).join('');els.stanceChips.querySelectorAll('button').forEach(b=>{b.onclick=()=>{const k=b.dataset.k;STATE.stances[k]=!STATE.stances[k];renderStanceChips();renderStanceSummary();saveState(STATE);};});}
function renderCatChips(){const map={"flips":"Flips","grinds":"Grinds/Slides","manuals":"Manuals","airs":"Airs","spins":"Spins"};els.catChips.innerHTML=Object.keys(map).map(k=>`<button data-k="${k}" class="${STATE.categories[k]?'active':''}">${map[k]}</button>`).join('');els.catChips.querySelectorAll('button').forEach(b=>{b.onclick=()=>{const k=b.dataset.k;STATE.categories[k]=!STATE.categories[k];if(k==="flips"){for(const t of Object.keys(STATE.flips)){STATE.flips[t]=STATE.categories[k]?STATE.flips[t]:false;}}if(k==="grinds"){for(const t of Object.keys(STATE.grinds)){STATE.grinds[t]=STATE.categories[k]?STATE.grinds[t]:false;}}if(k==="spins"){for(const t of Object.keys(STATE.spins)){STATE.spins[t]=STATE.categories[k]?STATE.spins[t]:false;}}renderCatChips();renderTrickPanels();renderTrickSummary();saveState(STATE);};});}
function renderTrickPanels(){const flipsDiv=document.querySelector('.panel.flips');const grindsDiv=document.querySelector('.panel.grinds');const spinsDiv=document.querySelector('.panel.spins');flipsDiv.innerHTML=Object.keys(STATE.flips).map(n=>labelBox('flips',n,STATE.flips[n],STATE.categories.flips)).join('');grindsDiv.innerHTML=Object.keys(STATE.grinds).map(n=>labelBox('grinds',n,STATE.grinds[n],STATE.categories.grinds)).join('');spinsDiv.innerHTML=Object.keys(STATE.spins).map(n=>labelBox('spins',n,STATE.spins[n],STATE.categories.spins)).join('');document.querySelectorAll('.tab').forEach(t=>{t.onclick=()=>{document.querySelectorAll('.tab').forEach(x=>x.classList.remove('active'));t.classList.add('active');document.querySelectorAll('.panel').forEach(p=>p.classList.add('hidden'));document.querySelector(`.panel.${t.dataset.tab}`).classList.remove('hidden');};});document.querySelectorAll('#settingsModal input[type=checkbox]').forEach(cb=>{cb.onchange=()=>{const g=cb.dataset.group,k=cb.dataset.key;STATE[g][k]=cb.checked;renderTrickSummary();saveState(STATE);};});}
function renderObsSummary(){els.obsNames.textContent=(STATE.obstacles&&STATE.obstacles.length)?STATE.obstacles.join(", "):"—";}
function renderStanceSummary(){const on=Object.keys(STATE.stances).filter(k=>STATE.stances[k]);els.stanceNames.textContent=on.join(", ")||"—";}
function renderTrickSummary(){const cats=Object.entries(STATE.categories).filter(([k,v])=>v).map(([k])=>k).join("/");const enabledFlips=Object.keys(STATE.flips).filter(k=>STATE.flips[k]).length;const enabledGrinds=Object.keys(STATE.grinds).filter(k=>STATE.grinds[k]).length;const enabledSpins=Object.keys(STATE.spins).filter(k=>STATE.spins[k]).length;els.trickSummary.textContent=`${cats||"—"} • F:${enabledFlips} G:${enabledGrinds} S:${enabledSpins}`;}
function renderAllSummaries(){renderObsSummary();renderStanceSummary();renderTrickSummary();}renderAllSummaries();
let misses=0,total=0,current=null,attempt=1,best=parseFloat(localStorage.getItem('bl_best')||"0");
function setView(which){els.viewSetup.classList.toggle('active',which==="setup");els.viewSetup.classList.toggle('hidden',which!=="setup");els.viewGame.classList.toggle('active',which==="game");els.viewGame.classList.toggle('hidden',which!=="game");els.viewOver.classList.toggle('active',which==="over");els.viewOver.classList.toggle('hidden',which!=="over");if(which==="setup"){els.scoreLabel.textContent="High Score:";els.scoreTop.textContent=`${best.toFixed(2)} pts`;}else if(which==="game"){els.scoreLabel.textContent="Total Score:";els.scoreTop.textContent=`${total.toFixed(2)} pts`;}}function updateLetters(){const spans=[...els.letters.children];spans.forEach((s,i)=>{s.classList.toggle('lost',i<misses);});}
function resetGameState(){misses=0;total=0;attempt=1;updateLetters();}
function startSession(){currentSkill=parseInt(els.skill.value,10);if(!STATE.obstacles||STATE.obstacles.length===0){STATE.obstacles=DEFAULTS.obstacles.slice();}saveState(STATE);resetGameState();setView("game");nextTrick(true);}els.startBtn.addEventListener('click',startSession);
function computeScore(c,a){if(!isValidCombo(c))return{valid:false,base:0,combo:1,attempt:0,final:0,breakdown:[]};let s=1.0,bd=[];const st=c.stance||"regular";s+=BASE_POINTS.stance[st]||0;bd.push(["stance",st,BASE_POINTS.stance[st]||0]);if(c.spin){s+=BASE_POINTS.spin[c.spin]||0;bd.push(["spin",c.spin,BASE_POINTS.spin[c.spin]||0]);}if(c.flip){s+=BASE_POINTS.flip[c.flip]||0;bd.push(["flip",c.flip,BASE_POINTS.flip[c.flip]||0]);}if(c.grind_slide){s+=BASE_POINTS.grind_slide[c.grind_slide]||0;bd.push(["grind_slide",c.grind_slide,BASE_POINTS.grind_slide[c.grind_slide]||0]);}if(c.manual){s+=BASE_POINTS.manual[c.manual]||0;bd.push(["manual",c.manual,BASE_POINTS.manual[c.manual]||0]);}if(c.obstacle){s+=BASE_POINTS.obstacle[c.obstacle]||0;bd.push(["obstacle",c.obstacle,BASE_POINTS.obstacle[c.obstacle]||0]);}let bonus=0;if(c.spin&&c.flip)bonus+=COMBO_BONUSES.spin_plus_flip;if(c.flip&&c.grind_slide)bonus+=COMBO_BONUSES.flip_into_grind;if(c.spin&&c.grind_slide)bonus+=COMBO_BONUSES.spin_into_grind;if(c.manual&&(c.flip||c.spin))bonus+=COMBO_BONUSES.manual_combo;s*=(1+bonus);const base=Math.max(s,0.05);const mult=(a===1?1.00:(a===2?0.85:0.75));return{valid:true,base:round(base,3),combo:round(1+bonus,3),attempt:mult,final:round(base*mult,3),breakdown:bd};}
function round(x,n){const k=Math.pow(10,n);return Math.round(x*k)/k;}
function prettyScore(r){if(!r.valid)return"Invalid combo for obstacle.";let lines=[`Base: ${r.base}`,`Combo x${r.combo}`,`Attempt x${r.attempt} => Final: ${r.final} pts`,"","Breakdown:"];for(const[k,n,p]of r.breakdown){lines.push(`  + ${k}:${n} = ${p}`);}return lines.join("\n");}
function updateAttemptUI(){els.attemptBadge.textContent=`Attempt ${attempt}/3`;const rep=computeScore(current,attempt);els.attemptPoints.textContent=rep.valid?`This attempt: ${rep.final.toFixed(2)} pts`:`This attempt: —`;els.breakText.textContent=prettyScore(rep);}
els.attemptPoints.addEventListener('click',()=>{document.getElementById('breakModal').classList.remove('hidden');});
document.getElementById('breakClose').addEventListener('click',()=>{document.getElementById('breakModal').classList.add('hidden');});
document.getElementById('breakModal').addEventListener('click',(e)=>{if(e.target===document.getElementById('breakModal'))document.getElementById('breakModal').classList.add('hidden');});
function nextTrick(first=false){attempt=1;updateAttemptUI();current=generateTrick(currentSkill);for(let i=0;i<3&&(!current||!describe(current));i++){current=generateTrick(currentSkill);}const text=describe(current)||"kickflip on flat";els.trickText.textContent=text;els.nextBtn.classList.add('hidden');setActionButtonsEnabled(true);if(!first)window.scrollTo({top:document.body.scrollHeight,behavior:'smooth'});}
function setActionButtonsEnabled(on){[els.skipBtn,els.missBtn,els.landBtn].forEach(b=>{b.disabled=!on;b.classList.toggle('hidden',!on);});els.nextBtn.classList.toggle('hidden',on);}
function settle(landed){if(landed){const rep=computeScore(current,attempt);total+=rep.final;els.scoreTop.textContent=`${total.toFixed(2)} pts`;setActionButtonsEnabled(false);}else{if(attempt<3){attempt++;updateAttemptUI();}else{misses++;updateLetters();if(misses>=5){endSession();return;}setActionButtonsEnabled(false);}}}
els.landBtn.addEventListener('click',()=>settle(true));els.missBtn.addEventListener('click',()=>settle(false));els.skipBtn.addEventListener('click',()=>{els.nextBtn.classList.add('hidden');nextTrick(false);});els.nextBtn.addEventListener('click',()=>nextTrick(false));
els.endBtn.addEventListener('click',()=>{if(confirm("End session early? Your current score will be lost.")){endSession();}});
function endSession(){setView("over");els.finalScore.textContent=total.toFixed(2);best=Math.max(total,parseFloat(localStorage.getItem('bl_best')||"0"));localStorage.setItem('bl_best',String(best));els.bestScore.textContent=best.toFixed(2);}
els.restartBtn.addEventListener('click',()=>{setView("setup");});
function initHeaderScore(){best=parseFloat(localStorage.getItem('bl_best')||"0");els.scoreLabel.textContent="High Score:";els.scoreTop.textContent=`${best.toFixed(2)} pts`;}initHeaderScore();setView("setup");
function clearCachesAndReload(){if('caches'in window){caches.keys().then(keys=>Promise.all(keys.map(k=>caches.delete(k)))).then(()=>{if(navigator.serviceWorker){navigator.serviceWorker.getRegistrations().then(regs=>Promise.all(regs.map(r=>r.unregister()))).then(()=>location.reload());}else{location.reload();}});}else{location.reload();}}
if('serviceWorker'in navigator){window.addEventListener('load',()=>navigator.serviceWorker.register('./sw.js'));}
console.log("Brainlock loaded",VERSION);