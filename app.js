const VERSION="0.4.9";
const DEFAULTS={categories:{flips:true,grinds:true,manuals:true,airs:true,spins:true},stances:{regular:true,fakie:true,nollie:true,switch:true},flips:{"kickflip":true,"heelflip":true,"varial kickflip":true,"varial heelflip":true,"hardflip":true,"inward heelflip":true,"bigspin flip":true,"bigspin heelflip":true,"tre flip":true,"360 flip":true,"laser flip":true},grinds:{"50-50":true,"5-0":true,"boardslide":true,"noseslide":true,"tailslide":true,"lipslide":true,"smith":true,"feeble":true,"willy":true,"salad":true,"crooked":true,"overcrook":true,"nosegrind":true,"noseblunt":true,"bluntslide":true},spins:{"180":true,"360":true,"540":true,"720":true},obstacles:["flat","ledge","rail","manual pad","quarterpipe","bank","kicker"]};
function loadState(){try{return JSON.parse(localStorage.getItem('bl_state'))||DEFAULTS;}catch{return DEFAULTS;}}
function saveState(s){localStorage.setItem('bl_state',JSON.stringify(s));}
let STATE=loadState();
const ALL_OBS=["flat","curb","ledge","flatbar","handrail","rail","hubba","kicker","gap","stair","quarterpipe","bank","mini ramp","funbox","manual pad","box"];
const RULES={STANCES:["regular","switch","nollie","fakie"],FLIPS:["kickflip","heelflip","hardflip","inward heelflip","varial kickflip","varial heelflip","tre flip","360 flip","laser flip","bigspin flip","bigspin heelflip"],GRINDS_SLIDES:["50-50","5-0","boardslide","noseslide","tailslide","lipslide","smith","feeble","willy","salad","crooked","overcrook","nosegrind","noseblunt","bluntslide"],MANUALS:["manual","nose manual","one wheel manual"],GRIND_OK:new Set(["rail","handrail","flatbar","ledge","hubba"]),SLIDE_OK:new Set(["ledge","hubba","rail","handrail","flatbar","curb","box"]),MANUAL_OK:new Set(["manual pad","box","funbox","kicker","bank"]),AIR_OK:new Set(["flat","gap","kicker","quarterpipe","bank","stair","funbox"])};
const MIN_SKILL={flips:{"kickflip":1,"heelflip":1,"varial kickflip":3,"varial heelflip":3,"hardflip":4,"inward heelflip":6,"tre flip":5,"360 flip":5,"laser flip":7,"bigspin flip":5,"bigspin heelflip":6},grinds:{"50-50":2,"5-0":3,"boardslide":3,"noseslide":4,"tailslide":4,"lipslide":3,"smith":3,"feeble":3,"willy":3,"salad":3,"crooked":7,"overcrook":7,"nosegrind":5,"noseblunt":7,"bluntslide":4},manuals:{"manual":2,"nose manual":2,"one wheel manual":6},spins:{180:4,360:5,540:7,720:8}};
const BASE_POINTS={stance:{regular:0,fakie:0.1,nollie:0.2,switch:0.3},spin:{180:0.2,360:0.4,540:0.6,720:0.8},flip:{"kickflip":0.3,"heelflip":0.35,"hardflip":0.55,"inward heelflip":0.6,"varial kickflip":0.45,"varial heelflip":0.5,"tre flip":0.8,"360 flip":0.8,"laser flip":0.85,"bigspin flip":0.6,"bigspin heelflip":0.65},grind_slide:{"50-50":0.3,"5-0":0.4,"boardslide":0.4,"noseslide":0.45,"tailslide":0.5,"lipslide":0.55,"smith":0.65,"feeble":0.65,"willy":0.55,"salad":0.6,"crooked":0.65,"overcrook":0.75,"nosegrind":0.7,"noseblunt":0.9,"bluntslide":0.85},obstacle:{"flat":0,"manual pad":0.1,"box":0.1,"curb":0.15,"ledge":0.25,"hubba":0.35,"flatbar":0.35,"rail":0.45,"handrail":0.55,"gap":0.5,"kicker":0.1,"stair":0.45,"quarterpipe":0.4,"bank":0.25,"funbox":0.2,"mini ramp":0.3},manual:{"manual":0.25,"nose manual":0.35,"one wheel manual":0.6}};
const COMBO_BONUSES={spin_plus_flip:0.2,flip_into_grind:0.25,spin_into_grind:0.15,manual_combo:0.15};
const SCORE_CAP={1:1.9,2:2.2,3:2.5,4:2.9,5:3.3,6:3.7,7:4.1,8:4.6,9:5.3,10:6.0};
function tier(s){return Math.max(1,Math.min(10,s|0));}
function scoreCapFor(s){return SCORE_CAP[tier(s)];}
function round(x,n){const k=Math.pow(10,n);return Math.round(x*k)/k;}
function computeScore(c,a){let s=1.0,bd=[];const st=c.stance||"regular";s+=BASE_POINTS.stance[st]||0;bd.push(["stance",st,BASE_POINTS.stance[st]||0]);if(c.spin){s+=BASE_POINTS.spin[c.spin]||0;bd.push(["spin",c.spin,BASE_POINTS.spin[c.spin]||0]);}if(c.flip){s+=BASE_POINTS.flip[c.flip]||0;bd.push(["flip",c.flip,BASE_POINTS.flip[c.flip]||0]);}if(c.grind_slide){s+=BASE_POINTS.grind_slide[c.grind_slide]||0;bd.push(["grind_slide",c.grind_slide,BASE_POINTS.grind_slide[c.grind_slide]||0]);}if(c.manual){s+=BASE_POINTS.manual[c.manual]||0;bd.push(["manual",c.manual,BASE_POINTS.manual[c.manual]||0]);}if(c.obstacle){s+=BASE_POINTS.obstacle[c.obstacle]||0;bd.push(["obstacle",c.obstacle,BASE_POINTS.obstacle[c.obstacle]||0]);}let bonus=0;if(c.spin&&c.flip)bonus+=COMBO_BONUSES.spin_plus_flip;if(c.flip&&c.grind_slide)bonus+=COMBO_BONUSES.flip_into_grind;if(c.spin&&c.grind_slide)bonus+=COMBO_BONUSES.spin_into_grind;if(c.manual&&(c.flip||c.spin))bonus+=COMBO_BONUSES.manual_combo;s*=(1+bonus);const mult={1:1.00,2:0.94,3:0.92}[a]||0;const base=Math.max(s,0.1);return{valid:true,base:round(base,3),combo:round(1+bonus,3),attempt:mult,final:round(base*mult,3),breakdown:bd};}
let currentSkill=6;
function poolBySkill(items,minMap,skill){return items.filter(n=>(minMap[n]||1)<=skill);}
function enabled(obj){return Object.keys(obj).filter(k=>obj[k]);}
function pick(arr){return arr[Math.floor(Math.random()*arr.length)];}
function stancePool(s){const p=RULES.STANCES.filter(st=>STATE.stances[st]);return s<=2?p.filter(x=>x!=="switch"):p;}
function obstaclePool(){const src=(STATE.obstacles&&STATE.obstacles.length?STATE.obstacles:DEFAULTS.obstacles).filter(o=>ALL_OBS.includes(o));return src.length?src:["flat"];}
function affordancesFor(ob){return{canGrind:RULES.GRIND_OK.has(ob)||RULES.SLIDE_OK.has(ob),canManual:RULES.MANUAL_OK.has(ob),canAir:RULES.AIR_OK.has(ob)||["rail","handrail","flatbar"].includes(ob)}};
function generatePreFiltered(skill){const s=tier(skill);const obs=pick(obstaclePool());const afford=affordancesFor(obs);const flipsPool=STATE.categories.flips?poolBySkill(Object.keys(STATE.flips).filter(n=>STATE.flips[n]),MIN_SKILL.flips,s).filter(n=>RULES.FLIPS.includes(n)):[];const grindsPool=STATE.categories.grinds?poolBySkill(Object.keys(STATE.grinds).filter(n=>STATE.grinds[n]),MIN_SKILL.grinds,s).filter(n=>RULES.GRINDS_SLIDES.includes(n)):[];const spinsPool=STATE.categories.spins?poolBySkill(Object.keys(STATE.spins).filter(k=>STATE.spins[k]).map(k=>parseInt(k,10)),MIN_SKILL.spins,s):[];const manualsPool=STATE.categories.manuals?poolBySkill(RULES.MANUALS,MIN_SKILL.manuals||{},s):[];const stances=stancePool(s);const wantFlip=flipsPool.length>0;const wantGrind=grindsPool.length>0&&afford.canGrind;const wantManual=manualsPool.length>0&&afford.canManual;const wantAir=afford.canAir;const patterns=[];if(wantFlip&&wantGrind)patterns.push("flipToGrind");if(wantGrind)patterns.push("grindOnly");if(wantManual)patterns.push("manualOnly");if(wantFlip&&wantAir)patterns.push("flipOnly");if(!patterns.length){if(wantFlip&&wantAir)return{stance:null,spin:null,spin_dir:null,flip:pick(flipsPool),grind_slide:null,direction:null,manual:null,obstacle:obs};if(wantGrind)return{stance:null,spin:null,spin_dir:null,flip:null,grind_slide:pick(grindsPool),direction:"frontside",manual:null,obstacle:obs};if(wantManual)return{stance:null,spin:null,spin_dir:null,flip:null,grind_slide:null,direction:null,manual:"manual",obstacle:obs};return{stance:null,spin:null,spin_dir:null,flip:"kickflip",grind_slide:null,direction:null,manual:null,obstacle:"flat"};}const pattern=pick(patterns);const comp={stance:null,spin:null,spin_dir:null,flip:null,grind_slide:null,direction:null,manual:null,obstacle:obs};if(Math.random()<(0.10+0.04*s)&&stances.length){const st=pick(stances);comp.stance=(st==="regular"?null:st);}if(spinsPool.length&&Math.random()<(0.12+0.05*s)){comp.spin=pick(spinsPool);comp.spin_dir=Math.random()<0.55?(Math.random()<0.5?"frontside":"backside"):null;}if(pattern==="flipToGrind"){comp.flip=pick(flipsPool);comp.grind_slide=pick(grindsPool);comp.direction=comp.direction||"frontside";}else if(pattern==="grindOnly"){comp.grind_slide=pick(grindsPool);comp.direction=comp.direction||"frontside";}else if(pattern==="manualOnly"){comp.manual="manual";}else if(pattern==="flipOnly"){comp.flip=pick(flipsPool);}return comp;}
function describe(c){const isRailObs=["rail","handrail","flatbar"].includes(c.obstacle);const parts=[];if(c.flip&&!c.grind_slide&&!c.manual&&isRailObs){parts.push(c.flip,"over",c.obstacle);return parts.join(" ");}if(c.stance&&c.stance!=="regular")parts.push(c.stance);if(c.spin){parts.push(c.spin_dir?`${c.spin_dir} ${c.spin}`:`${c.spin}`);}if(c.flip)parts.push(c.flip);if(c.direction&&c.grind_slide)parts.push(`${c.direction} ${c.grind_slide}`);else if(c.grind_slide)parts.push(c.grind_slide);if(c.manual)parts.push(c.manual);if(c.obstacle)parts.push(`on ${c.obstacle}`);return parts.join(" ");}
const els={titleText:document.getElementById('titleText'),skill:document.getElementById('skill'),skillVal:document.getElementById('skillVal'),sheet:document.getElementById('sheet'),viewSetup:document.getElementById('viewSetup'),viewGame:document.getElementById('viewGame'),viewOver:document.getElementById('viewOver'),startBtn:document.getElementById('startBtn'),trickBox:document.getElementById('trick'),trickText:document.getElementById('trickText'),landBtn:document.getElementById('landBtn'),missBtn:document.getElementById('missBtn'),skipBtn:document.getElementById('skipBtn'),nextBtn:document.getElementById('nextBtn'),endBtn:document.getElementById('endBtn'),finalScore:document.getElementById('finalScore'),bestScore:document.getElementById('bestScore'),restartBtn:document.getElementById('restartBtn'),breakdown:document.getElementById('breakdown'),breakText:document.getElementById('breakText'),settingsBtn:document.getElementById('settingsBtn'),settingsModal:document.getElementById('settingsModal'),settingsTitle:document.getElementById('settingsTitle'),settingsBack:document.getElementById('settingsBack'),settingsClose:document.getElementById('settingsClose'),settingsSave:document.getElementById('settingsSave'),exportFeedback:document.getElementById('exportFeedback'),clearCache:document.getElementById('clearCache'),obsChips:document.getElementById('obsChips'),catChips:document.getElementById('catChips'),stanceChips:document.getElementById('stanceChips'),obsNames:document.getElementById('obsNames'),stanceNames:document.getElementById('stanceNames'),trickSummary:document.getElementById('trickSummary'),editObs:document.getElementById('editObs'),editStance:document.getElementById('editStance'),editTricks:document.getElementById('editTricks'),letters:document.getElementById('letters'),scoreTop:document.getElementById('scoreTop'),attemptBadge:document.getElementById('attemptBadge'),attemptPoints:document.getElementById('attemptPoints'),previewTray:document.getElementById('previewTray'),collapsePreview:document.getElementById('collapsePreview')};
els.titleText.addEventListener('click',()=>location.reload());
els.skill.addEventListener('input',e=>{els.skillVal.textContent=e.target.value;});
els.collapsePreview.addEventListener('click',()=>{const collapsed=els.previewTray.classList.toggle('collapsed');els.collapsePreview.setAttribute('aria-expanded',String(!collapsed));els.collapsePreview.textContent=collapsed?"▼":"▲";});
const PANES=["settingsHome","obsPane","stancePane","trickPane","aboutPane"];
function openPane(id){PANES.forEach(pid=>document.getElementById(pid).classList.toggle('active',pid===id));document.getElementById('settingsBack').classList.toggle('hidden',id==="settingsHome");document.getElementById('settingsTitle').textContent=id==="settingsHome"?"Settings":id==="obsPane"?"Obstacles":id==="stancePane"?"Stances":id==="trickPane"?"Tricks":"About & Tools";}
function openSettings(){openPane("settingsHome");renderObsChips();renderStanceChips();renderCatChips();renderTrickPanels();els.settingsModal.classList.remove('hidden');}
els.settingsBtn.addEventListener('click',openSettings);
document.getElementById('settingsClose').addEventListener('click',()=>els.settingsModal.classList.add('hidden'));
document.getElementById('settingsBack').addEventListener('click',()=>openPane("settingsHome"));
els.settingsModal.addEventListener('click',(e)=>{if(e.target===els.settingsModal)els.settingsModal.classList.add('hidden');});
document.querySelectorAll('#settingsHome .list-item').forEach(btn=>btn.addEventListener('click',()=>openPane(btn.dataset.open)));
document.getElementById('settingsSave').addEventListener('click',()=>{saveState(STATE);renderAllSummaries();els.settingsModal.classList.add('hidden');});
document.getElementById('editObs').addEventListener('click',()=>{openSettings();openPane("obsPane");});
document.getElementById('editStance').addEventListener('click',()=>{openSettings();openPane("stancePane");});
document.getElementById('editTricks').addEventListener('click',()=>{openSettings();openPane("trickPane");});
function renderObsSummary(){els.obsNames.textContent=(STATE.obstacles&&STATE.obstacles.length)?STATE.obstacles.join(", "):"—";}
function renderStanceSummary(){const on=Object.keys(STATE.stances).filter(k=>STATE.stances[k]);els.stanceNames.textContent=on.join(", ")||"—";}
function renderTrickSummary(){const cats=Object.entries(STATE.categories).filter(([k,v])=>v).map(([k])=>k).join("/");const ef=Object.keys(STATE.flips).filter(k=>STATE.flips[k]).length;const eg=Object.keys(STATE.grinds).filter(k=>STATE.grinds[k]).length;const es=Object.keys(STATE.spins).filter(k=>STATE.spins[k]).length;els.trickSummary.textContent=`${cats||"—"} • F:${ef} G:${eg} S:${es}`;}
function renderAllSummaries(){renderObsSummary();renderStanceSummary();renderTrickSummary();}
function renderObsChips(){const pool=ALL_OBS;els.obsChips.innerHTML=pool.map(o=>`<button data-o="${o}" class="${STATE.obstacles.includes(o)?'active':''}">${o}</button>`).join('');els.obsChips.querySelectorAll('button').forEach(b=>{b.onclick=()=>{const o=b.dataset.o;STATE.obstacles=STATE.obstacles.includes(o)?STATE.obstacles.filter(x=>x!==o):STATE.obstacles.concat([o]);renderObsChips();renderObsSummary();saveState(STATE);};});}
function renderStanceChips(){const keys=["regular","fakie","nollie","switch"];els.stanceChips.innerHTML=keys.map(k=>`<button data-k="${k}" class="${STATE.stances[k]?'active':''}">${k}</button>`).join('');els.stanceChips.querySelectorAll('button').forEach(b=>{b.onclick=()=>{const k=b.dataset.k;STATE.stances[k]=!STATE.stances[k];renderStanceChips();renderStanceSummary();saveState(STATE);};});}
function renderCatChips(){const map={"flips":"Flips","grinds":"Grinds/Slides","manuals":"Manuals","airs":"Airs","spins":"Spins"};els.catChips.innerHTML=Object.keys(map).map(k=>`<button data-k="${k}" class="${STATE.categories[k]?'active':''}">${map[k]}</button>`).join('');els.catChips.querySelectorAll('button').forEach(b=>{b.onclick=()=>{const k=b.dataset.k;STATE.categories[k]=!STATE.categories[k];renderTrickPanels();renderTrickSummary();saveState(STATE);renderCatChips();};});}
function labelBox(group,key,checked,enabled){const dis=enabled?"":"disabled";const cls=enabled?"":"disabled";const id=`${group}-${key}`.replace(/\s+/g,'-');return `<label class="${cls}"><input id="${id}" type="checkbox" data-group="${group}" data-key="${key}" ${checked?'checked':''} ${dis}/> ${key}</label>`;}
function renderTrickPanels(){const flipsDiv=document.querySelector('.panel.flips');const grindsDiv=document.querySelector('.panel.grinds');const spinsDiv=document.querySelector('.panel.spins');flipsDiv.innerHTML=RULES.FLIPS.map(n=>labelBox('flips',n,!!STATE.flips[n],STATE.categories.flips)).join('');grindsDiv.innerHTML=RULES.GRINDS_SLIDES.map(n=>labelBox('grinds',n,!!STATE.grinds[n],STATE.categories.grinds)).join('');spinsDiv.innerHTML=Object.keys(STATE.spins).map(n=>labelBox('spins',n,!!STATE.spins[n],STATE.categories.spins)).join('');document.querySelectorAll('.tab').forEach(t=>{t.onclick=()=>{document.querySelectorAll('.tab').forEach(x=>x.classList.remove('active'));t.classList.add('active');document.querySelectorAll('.panel').forEach(p=>p.classList.add('hidden'));document.querySelector(`.panel.${t.dataset.tab}`).classList.remove('hidden');};});document.querySelectorAll('#trickPane input[type=checkbox]').forEach(cb=>{cb.onchange=()=>{const g=cb.dataset.group,k=cb.dataset.key;if(g==="flips")STATE.flips[k]=cb.checked; if(g==="grinds")STATE.grinds[k]=cb.checked; if(g==="spins")STATE.spins[k]=cb.checked; renderTrickSummary();saveState(STATE);};});}
let misses=0,total=0,current=null,attempt=1;
function setView(which){els.viewSetup.classList.toggle('active',which==="setup");els.viewSetup.classList.toggle('hidden',which!=="setup");els.viewGame.classList.toggle('active',which==="game");els.viewGame.classList.toggle('hidden',which!=="game");els.viewOver.classList.toggle('active',which==="over");els.viewOver.classList.toggle('hidden',which!=="over");}
function updateLetters(){const spans=[...els.letters.children];spans.forEach((s,i)=>{s.classList.toggle('lost',i<misses);});}
function resetGameState(){misses=0;total=0;attempt=1;els.scoreTop.textContent=total.toFixed(2);updateLetters();}
function startSession(){currentSkill=parseInt(els.skill.value,10);if(!STATE.obstacles||STATE.obstacles.length===0){STATE.obstacles=DEFAULTS.obstacles.slice();}saveState(STATE);resetGameState();setView("game");nextTrick(true);} 
els.startBtn.addEventListener('click',startSession);
function prettyScore(rep){let lines=[`Base: ${rep.base}`,`Combo x${rep.combo}`,`Attempt x${rep.attempt} => Final: ${rep.final}`,"","Breakdown:"];for(const[k,n,p]of rep.breakdown){lines.push(`  + ${k}:${n} = ${p}`);}return lines.join("\n");}
function updateAttemptUI(){els.attemptBadge.textContent=`Attempt ${attempt}/3`;const rep=computeScore(current,attempt);els.attemptPoints.textContent=`This attempt: ${rep.final.toFixed(2)}`;}
function showNextMode(on){if(on){els.nextBtn.classList.remove('hidden');[els.skipBtn,els.missBtn,els.landBtn].forEach(b=>{b.setAttribute('aria-disabled','true');b.classList.add('hidden');});}else{els.nextBtn.classList.add('hidden');[els.skipBtn,els.missBtn,els.landBtn].forEach(b=>{b.removeAttribute('aria-disabled');b.classList.remove('hidden');});}}
function nextTrick(first=false){attempt=1;let tries=0;do{current=generatePreFiltered(currentSkill);tries++;}while(!describe(current)&&tries<40);if(!describe(current)){current={stance:null,spin:null,spin_dir:null,flip:"kickflip",grind_slide:null,direction:null,manual:null,obstacle:"flat"};}els.trickText.textContent=describe(current);updateAttemptUI();els.breakdown.open=false;showNextMode(false);if(!first)window.scrollTo({top:document.body.scrollHeight,behavior:'smooth'});}
function settle(landed){if(landed){const rep=computeScore(current,attempt);total+=rep.final;els.scoreTop.textContent=total.toFixed(2);els.breakText.textContent=prettyScore(rep);els.breakdown.open=true;showNextMode(true);}else{if(attempt<3){attempt++;updateAttemptUI();}else{misses++;updateLetters();if(misses>=5){endSession();return;}showNextMode(true);}}}
els.landBtn.addEventListener('click',()=>settle(true));
els.missBtn.addEventListener('click',()=>settle(false));
els.skipBtn.addEventListener('click',()=>{showNextMode(false);nextTrick(false);});
els.nextBtn.addEventListener('click',()=>{showNextMode(false);nextTrick(false);});
function endSession(){setView("over");els.finalScore.textContent=total.toFixed(2);const best=Math.max(total,parseFloat(localStorage.getItem('bl_best')||"0"));localStorage.setItem('bl_best',String(best));els.bestScore.textContent=best.toFixed(2);} 
els.endBtn.addEventListener('click',endSession);
renderAllSummaries();
if('serviceWorker'in navigator){window.addEventListener('load',()=>navigator.serviceWorker.register('./sw.js'));}
console.log("Brainlock loaded",VERSION);