const VERSION="0.4.7";const DEFAULTS={categories:{flips:true,grinds:true,manuals:true,airs:true,spins:true},stances:{regular:true,fakie:true,nollie:true,switch:true},flips:{"kickflip":true,"heelflip":true,"varial kickflip":true,"varial heelflip":true,"hardflip":true,"inward heelflip":true,"bigspin flip":true,"bigspin heelflip":true,"tre flip":true,"360 flip":true,"laser flip":true},grinds:{"50-50":true,"5-0":true,"boardslide":true,"noseslide":true,"tailslide":true,"lipslide":true,"smith":true,"feeble":true,"willy":true,"salad":true,"crooked":true,"overcrook":true,"nosegrind":true,"noseblunt":true,"bluntslide":true},spins:{"180":true,"360":true,"540":true,"720":true},obstacles:["flat","ledge","rail","manual pad","quarterpipe","bank","kicker"]};function loadState(){try{return JSON.parse(localStorage.getItem('bl_state'))||DEFAULTS;}catch{return DEFAULTS;}}function saveState(s){localStorage.setItem('bl_state',JSON.stringify(s));}let STATE=loadState();const ALL_OBS=["flat","curb","ledge","flatbar","handrail","rail","hubba","kicker","gap","stair","quarterpipe","bank","mini ramp","funbox","manual pad","box"];const RULES={DIRECTION_DEFAULTS:{"50-50":"frontside","5-0":"frontside","boardslide":"backside","noseslide":"backside","lipslide":"frontside","tailslide":"frontside","bluntslide":"backside","nosegrind":"frontside","crooked":"backside","willy":"backside","feeble":"backside","smith":"backside","salad":"backside","overcrook":"backside","noseblunt":"frontside"},STANCES:["regular","switch","nollie","fakie"],SPINS:[180,360,540,720],FLIPS:["kickflip","heelflip","hardflip","inward heelflip","varial kickflip","varial heelflip","tre flip","360 flip","laser flip","bigspin flip","bigspin heelflip"],GRINDS_SLIDES:["50-50","5-0","boardslide","noseslide","tailslide","lipslide","smith","feeble","willy","salad","crooked","overcrook","nosegrind","noseblunt","bluntslide"],MANUALS:["manual","nose manual","one wheel manual"],GRIND_OK:new Set(["rail","handrail","flatbar","ledge","hubba"]),SLIDE_OK:new Set(["ledge","hubba","rail","handrail","flatbar","curb","box"]),MANUAL_OK:new Set(["manual pad","box","funbox","kicker","bank"]),AIR_OK:new Set(["flat","gap","kicker","quarterpipe","bank","stair","funbox"])};const BASE_POINTS={stance:{regular:0,fakie:0.1,nollie:0.2,switch:0.3},spin:{180:0.2,360:0.4,540:0.6,720:0.8},flip:{"kickflip":0.3,"heelflip":0.35,"hardflip":0.55,"inward heelflip":0.6,"varial kickflip":0.45,"varial heelflip":0.5,"tre flip":0.8,"360 flip":0.8,"laser flip":0.85,"bigspin flip":0.6,"bigspin heelflip":0.65},grind_slide:{"50-50":0.3,"5-0":0.4,"boardslide":0.4,"noseslide":0.45,"tailslide":0.5,"lipslide":0.55,"smith":0.65,"feeble":0.65,"willy":0.55,"salad":0.6,"crooked":0.65,"overcrook":0.75,"nosegrind":0.7,"noseblunt":0.9,"bluntslide":0.85},obstacle:{"flat":0,"manual pad":0.1,"box":0.1,"curb":0.15,"ledge":0.25,"hubba":0.35,"flatbar":0.35,"rail":0.45,"handrail":0.55,"gap":0.5,"kicker":0.1,"stair":0.45,"quarterpipe":0.4,"bank":0.25,"funbox":0.2,"mini ramp":0.3},manual:{"manual":0.25,"nose manual":0.35,"one wheel manual":0.6}};const COMBO_BONUSES={spin_plus_flip:0.2,flip_into_grind:0.25,spin_into_grind:0.15,manual_combo:0.15};function tier(s){return Math.max(1,Math.min(10,s|0));}const SCORE_CAP={1:1.9,2:2.2,3:2.5,4:2.9,5:3.3,6:3.7,7:4.1,8:4.6,9:5.3,10:6.0};function scoreCapFor(s){return SCORE_CAP[tier(s)];}function allowFlip(n,s){const hi=["tre flip","360 flip","laser flip","bigspin heelflip","hardflip","inward heelflip"];const mid=["varial kickflip","varial heelflip","bigspin flip"];if(s<=1)return["kickflip","heelflip"].includes(n);if(s<=2)return!hi.includes(n)&&!mid.includes(n);if(s<=4)return!hi.includes(n);if(s===5)return n!=="laser flip";if(s===9)return !["kickflip","heelflip"].includes(n);return true;}function allowGrindSlide(n,s){const high=["overcrook","noseblunt","bluntslide"];if(s<=1)return["50-50","boardslide","5-0","noseslide","tailslide"].includes(n);if(s<=2)return!high.includes(n)&&!["smith","feeble","overcrook"].includes(n);if(s<=4)return!high.includes(n)||n==="overcrook";if(s===9)return high.includes(n)||["crooked","nosegrind","5-0"].includes(n);return true;}function allowSpin(sp,s){if(s<=2)return sp<=180;if(s<=4)return sp<=360;if(s<=7)return sp<=540;if(s===8)return sp<=720;return true;}function stancePool(s){const p=Object.keys(STATE.stances).filter(k=>STATE.stances[k]);return s<=2?p.filter(x!=="switch"):p;}let currentSkill=6;function underScoreCap(c){const r=computeScore(c,1);return r.base<=scoreCapFor(currentSkill||6);}function anyEnabled(obj){return Object.values(obj).some(v=>!!v)}function effectiveCategoryEnabled(cat){if(!STATE.categories[cat])return false;if(cat==="flips")return anyEnabled(STATE.flips);if(cat==="grinds")return anyEnabled(STATE.grinds);if(cat==="spins")return anyEnabled(STATE.spins);if(cat==="manuals"||cat==="airs")return true;return true;}const HISTORY_WINDOW=7,DUPLICATE_THRESHOLD=0.82;let _recent=[];function pushRecent(c){_recent.unshift(c);if(_recent.length>HISTORY_WINDOW)_recent.pop();}function similarity(a,b){const keys=["stance","spin","flip","grind_slide","direction","manual","obstacle"];let same=0;for(const k of keys){if((!a[k]&&!b[k])||(a[k]&&b[k]&&String(a[k])===String(b[k])))same++;}return same/keys.length;}function notTooSimilar(c){for(const p of _recent){if(similarity(c,p)>=DUPLICATE_THRESHOLD)return false;}return true;}function pickObstacle(){const src=(STATE.obstacles&&STATE.obstacles.length?STATE.obstacles:DEFAULTS.obstacles).filter(o=>ALL_OBS.includes(o));return src.length?src[Math.floor(Math.random()*src.length)]:"flat"}function isRail(ob){return["rail","handrail","flatbar"].includes(ob);}function isValidCombo(c){const g=c.grind_slide,m=c.manual,ob=c.obstacle,fl=c.flip;if(g){const isSlide=["boardslide","lipslide","tailslide","noseslide","bluntslide"].includes(g);if(!ob)return false;if(isSlide&&!RULES.SLIDE_OK.has(ob))return false;if(!isSlide&&!(RULES.GRIND_OK.has(ob)||RULES.SLIDE_OK.has(ob)))return false;}if(m){if(ob&&!RULES.MANUAL_OK.has(ob))return false;}if(fl&&!g&&!m&&ob){if(!(RULES.AIR_OK.has(ob)||isRail(ob)))return false;}return true;}function safeMinimal(){return{stance:null,spin:null,spin_dir:null,flip:"kickflip",grind_slide:null,direction:null,manual:null,obstacle:"flat"};}function generateTrick(skill){const s=tier(skill),ob=pickObstacle();const c={stance:null,spin:null,spin_dir:null,flip:null,grind_slide:null,direction:null,manual:null,obstacle:ob};if(Math.random()<(0.10+0.04*s)){const pool=stancePool(s);if(pool.length){const st=pool[Math.floor(Math.random()*pool.length)];c.stance=(st==="regular"?null:st);}}const allowFlips=effectiveCategoryEnabled("flips"),allowGrinds=effectiveCategoryEnabled("grinds"),allowSpins=effectiveCategoryEnabled("spins"),allowManuals=effectiveCategoryEnabled("manuals"),allowAirs=effectiveCategoryEnabled("airs");if(allowSpins&&Math.random()<(0.14+0.05*s)){const spins=[180,360,540,720].filter(x=>STATE.spins[String(x)]&&allowSpin(x,s));if(spins.length){c.spin=spins[Math.floor(Math.random()*spins.length)];if(Math.random()<0.6)c.spin_dir=(Math.random()<0.5?"frontside":"backside");}}if(allowFlips&&Math.random()<(0.24+0.05*s)){const pool=RULES.FLIPS.filter(n=>STATE.flips[n]&&allowFlip(n,s));if(pool.length)c.flip=pool[Math.floor(Math.random()*pool.length)];}const canGrindish=(allowGrinds&&(RULES.GRIND_OK.has(ob)||RULES.SLIDE_OK.has(ob)));const canManual=(allowManuals&&RULES.MANUAL_OK.has(ob));const airish=(allowAirs&&(RULES.AIR_OK.has(ob)||isRail(ob)));if(canGrindish&&Math.random()<(0.24+0.04*s)){const pool=RULES.GRINDS_SLIDES.filter(n=>STATE.grinds[n]&&allowGrindSlide(n,s));if(pool.length){c.grind_slide=pool[Math.floor(Math.random()*pool.length)];c.direction=RULES.DIRECTION_DEFAULTS[c.grind_slide]||"frontside";}}else if(canManual&&Math.random()<(0.18+0.03*s)){c.manual="manual";}else if(airish&&!c.flip&&Math.random()<(0.36+0.05*s)){const pool=["kickflip","heelflip","varial kickflip"].filter(n=>STATE.flips[n]&&allowFlip(n,s));if(s>=7&&STATE.flips["tre flip"])pool.push("tre flip");if(pool.length)c.flip=pool[Math.floor(Math.random()*pool.length)];}if(!c.flip&&!c.grind_slide&&!c.manual){if(airish&&allowFlips){c.flip=STATE.flips["kickflip"]?"kickflip":(STATE.flips["heelflip"]?"heelflip":null);}if(!c.flip&&canGrindish){c.grind_slide="50-50";c.direction=RULES.DIRECTION_DEFAULTS["50-50"];}if(!c.flip&&!c.grind_slide&&canManual){c.manual="manual";}}if(!c.flip&&!c.grind_slide&&!c.manual){c.obstacle=RULES.AIR_OK.has(ob)?ob:"flat";c.flip="kickflip";}for(let i=0;i<10&&(!isValidCombo(c)||!underScoreCap(c)||!notTooSimilar(c));i++){if(!isValidCombo(c)){if(c.grind_slide&&!(RULES.GRIND_OK.has(c.obstacle)||RULES.SLIDE_OK.has(c.obstacle))){const opts=[...RULES.GRIND_OK,...RULES.SLIDE_OK].filter(o=>STATE.obstacles.includes(o));if(opts.length)c.obstacle=opts[Math.floor(Math.random()*opts.length)];else{c.grind_slide=null;c.direction=null;}}else if(c.manual&&!RULES.MANUAL_OK.has(c.obstacle)){const opts=[...RULES.MANUAL_OK].filter(o=>STATE.obstacles.includes(o));if(opts.length)c.obstacle=opts[Math.floor(Math.random()*opts.length)];else c.manual=null;}else if(c.flip&&!c.grind_slide&&!c.manual&&!(RULES.AIR_OK.has(c.obstacle)||isRail(c.obstacle))){const opts=[...RULES.AIR_OK].filter(o=>STATE.obstacles.includes(o));if(opts.length)c.obstacle=opts[Math.floor(Math.random()*opts.length)];else{c.flip=null;c.obstacle="flat";}}}else{if(!underScoreCap(c)){if(c.spin){c.spin=null;c.spin_dir=null;}else if(c.flip)c.flip=null;else if(c.grind_slide){c.grind_slide=null;c.direction=null;}}if(!notTooSimilar(c)){if(c.flip&&Math.random()<0.5)c.flip=null;if(c.grind_slide&&Math.random()<0.5){c.grind_slide=null;c.direction=null;}if(c.spin&&Math.random()<0.5){c.spin=null;c.spin_dir=null;}}}}if(!isValidCombo(c)){const m=safeMinimal();pushRecent(m);return m;}if(!c.spin)c.spin_dir=null;pushRecent(c);return c;}function describe(c){const isRailObs=["rail","handrail","flatbar"].includes(c.obstacle);const p=[];if(c.flip&&!c.grind_slide&&!c.manual&&isRailObs){p.push(c.flip,"over",c.obstacle);return p.join(" ");}if(c.stance&&c.stance!=="regular")p.push(c.stance);if(c.spin)p.push(c.spin_dir?`${c.spin_dir} ${c.spin}`:`${c.spin}`);if(c.flip)p.push(c.flip);if(c.direction&&c.grind_slide)p.push(`${c.direction} ${c.grind_slide}`);else if(c.grind_slide)p.push(c.grind_slide);if(c.manual)p.push(c.manual);if(c.obstacle)p.push(`on ${c.obstacle}`);return p.join(" ");}
const els={titleText:document.getElementById('titleText'),skill:document.getElementById('skill'),skillVal:document.getElementById('skillVal'),sheet:document.getElementById('sheet'),viewSetup:document.getElementById('viewSetup'),viewGame:document.getElementById('viewGame'),viewOver:document.getElementById('viewOver'),startBtn:document.getElementById('startBtn'),trickBox:document.getElementById('trick'),trickText:document.getElementById('trickText'),landBtn:document.getElementById('landBtn'),missBtn:document.getElementById('missBtn'),skipBtn:document.getElementById('skipBtn'),nextBtn:document.getElementById('nextBtn'),endBtn:document.getElementById('endBtn'),finalScore:document.getElementById('finalScore'),bestScore:document.getElementById('bestScore'),restartBtn:document.getElementById('restartBtn'),breakdown:document.getElementById('breakdown'),breakText:document.getElementById('breakText'),settingsBtn:document.getElementById('settingsBtn'),settingsModal:document.getElementById('settingsModal'),settingsTitle:document.getElementById('settingsTitle'),settingsBack:document.getElementById('settingsBack'),settingsClose:document.getElementById('settingsClose'),settingsSave:document.getElementById('settingsSave'),exportFeedback:document.getElementById('exportFeedback'),clearCache:document.getElementById('clearCache'),obsChips:document.getElementById('obsChips'),catChips:document.getElementById('catChips'),stanceChips:document.getElementById('stanceChips'),obsNames:document.getElementById('obsNames'),stanceNames:document.getElementById('stanceNames'),trickSummary:document.getElementById('trickSummary'),editObs:document.getElementById('editObs'),editStance:document.getElementById('editStance'),editTricks:document.getElementById('editTricks'),letters:document.getElementById('letters'),scoreTop:document.getElementById('scoreTop'),attemptBadge:document.getElementById('attemptBadge'),attemptPoints:document.getElementById('attemptPoints'),previewTray:document.getElementById('previewTray'),collapsePreview:document.getElementById('collapsePreview'),};els.titleText.addEventListener('click',()=>location.reload());els.skill.addEventListener('input',e=>{els.skillVal.textContent=e.target.value;});function setPreviewArrow(){const collapsed=els.previewTray.classList.contains('collapsed');els.collapsePreview.textContent=collapsed?'▼':'▲';els.collapsePreview.setAttribute('aria-expanded',String(!collapsed));}els.collapsePreview.addEventListener('click',()=>{els.previewTray.classList.toggle('collapsed');setPreviewArrow();});setPreviewArrow();function openPane(id){["settingsHome","obsPane","stancePane","trickPane","aboutPane"].forEach(pid=>document.getElementById(pid).classList.toggle('active',pid===id));document.getElementById('settingsBack').classList.toggle('hidden',id==="settingsHome");document.getElementById('settingsTitle').textContent=id==="settingsHome"?"Settings":id==="obsPane"?"Obstacles":id==="stancePane"?"Stances":id==="trickPane"?"Tricks":"About & Tools";}document.getElementById('settingsBtn').addEventListener('click',()=>{openPane("settingsHome");renderObsChips();renderStanceChips();renderCatChips();renderTrickPanels();els.settingsModal.classList.remove('hidden');});els.settingsClose.addEventListener('click',()=>els.settingsModal.classList.add('hidden'));els.settingsBack.addEventListener('click',()=>openPane("settingsHome"));els.settingsModal.addEventListener('click',(e)=>{if(e.target===els.settingsModal)els.settingsModal.classList.add('hidden');});document.querySelectorAll('#settingsHome .list-item').forEach(btn=>btn.addEventListener('click',()=>openPane(btn.dataset.open)));document.getElementById('settingsSave').addEventListener('click',()=>{saveState(STATE);renderAllSummaries();els.settingsModal.classList.add('hidden');});els.editObs.addEventListener('click',()=>{els.settingsModal.classList.remove('hidden');openPane("obsPane");renderObsChips();});els.editStance.addEventListener('click',()=>{els.settingsModal.classList.remove('hidden');openPane("stancePane");renderStanceChips();});els.editTricks.addEventListener('click',()=>{els.settingsModal.classList.remove('hidden');openPane("trickPane");renderCatChips();renderTrickPanels();});function renderObsSummary(){els.obsNames.textContent=(STATE.obstacles&&STATE.obstacles.length)?STATE.obstacles.join(", "):"—";}function renderStanceSummary(){const on=Object.keys(STATE.stances).filter(k=>STATE.stances[k]);els.stanceNames.textContent=on.join(", ")||"—";}function renderTrickSummary(){const cats=Object.entries(STATE.categories).filter(([k,v])=>v).map(([k])=>k).join("/");const ef=Object.keys(STATE.flips).filter(k=>STATE.flips[k]).length;const eg=Object.keys(STATE.grinds).filter(k=>STATE.grinds[k]).length;const es=Object.keys(STATE.spins).filter(k=>STATE.spins[k]).length;els.trickSummary.textContent=`${cats||"—"} • F:${ef} G:${eg} S:${es}`;}function renderAllSummaries(){renderObsSummary();renderStanceSummary();renderTrickSummary();}renderAllSummaries();function renderObsChips(){const pool=ALL_OBS;els.obsChips.innerHTML=pool.map(o=>`<button data-o="${o}" class="${STATE.obstacles.includes(o)?'active':''}">${o}</button>`).join('');els.obsChips.querySelectorAll('button').forEach(b=>{b.onclick=()=>{const o=b.dataset.o;STATE.obstacles=STATE.obstacles.includes(o)?STATE.obstacles.filter(x=>x!==o):STATE.obstacles.concat([o]);renderObsChips();renderObsSummary();saveState(STATE);};});}function renderStanceChips(){const keys=["regular","fakie","nollie","switch"];els.stanceChips.innerHTML=keys.map(k=>`<button data-k="${k}" class="${STATE.stances[k]?'active':''}">${k}</button>`).join('');els.stanceChips.querySelectorAll('button').forEach(b=>{b.onclick=()=>{const k=b.dataset.k;STATE.stances[k]=!STATE.stances[k];renderStanceChips();renderStanceSummary();saveState(STATE);};});}function renderCatChips(){const map={"flips":"Flips","grinds":"Grinds/Slides","manuals":"Manuals","airs":"Airs","spins":"Spins"};els.catChips.innerHTML=Object.keys(map).map(k=>`<button data-k="${k}" class="${STATE.categories[k]?'active':''}">${map[k]}</button>`).join('');els.catChips.querySelectorAll('button').forEach(b=>{b.onclick=()=>{const k=b.dataset.k;STATE.categories[k]=!STATE.categories[k];if(k==="flips"){for(const t of Object.keys(STATE.flips)){STATE.flips[t]=STATE.categories[k]?STATE.flips[t]:false;}}if(k==="grinds"){for(const t of Object.keys(STATE.grinds)){STATE.grinds[t]=STATE.categories[k]?STATE.grinds[t]:false;}}if(k==="spins"){for(const t of Object.keys(STATE.spins)){STATE.spins[t]=STATE.categories[k]?STATE.spins[t]:false;}}renderCatChips();renderTrickPanels();renderTrickSummary();saveState(STATE);};});}function labelBox(group,key,checked,enabled){const dis=enabled?"":"disabled";const id=`${group}-${key}`.replace(/\s+/g,'-');const cls=enabled?"":"disabled";return `<label class="${cls}"><input id="${id}" type="checkbox" data-group="${group}" data-key="${key}" ${checked?'checked':''} ${dis}/> ${key}</label>`;}function renderTrickPanels(){const flipsDiv=document.querySelector('.panel.flips');const grindsDiv=document.querySelector('.panel.grinds');const spinsDiv=document.querySelector('.panel.spins');flipsDiv.innerHTML=Object.keys(STATE.flips).map(n=>labelBox('flips',n,STATE.flips[n],STATE.categories.flips)).join('');grindsDiv.innerHTML=Object.keys(STATE.grinds).map(n=>labelBox('grinds',n,STATE.grinds[n],STATE.categories.grinds)).join('');spinsDiv.innerHTML=Object.keys(STATE.spins).map(n=>labelBox('spins',n,STATE.spins[n],STATE.categories.spins)).join('');document.querySelectorAll('.tab').forEach(t=>{t.onclick=()=>{document.querySelectorAll('.tab').forEach(x=>x.classList.remove('active'));t.classList.add('active');document.querySelectorAll('.panel').forEach(p=>p.classList.add('hidden'));document.querySelector(`.panel.${t.dataset.tab}`).classList.remove('hidden');};});document.querySelectorAll('#trickPane input[type=checkbox]').forEach(cb=>{cb.onchange=()=>{const g=cb.dataset.group,k=cb.dataset.key;STATE[g][k]=cb.checked;renderTrickSummary();saveState(STATE);};});}
let misses=0,total=0,current=null,attempt=1;function setView(which){els.viewSetup.classList.toggle('active',which==="setup");els.viewSetup.classList.toggle('hidden',which!=="setup");els.viewGame.classList.toggle('active',which==="game");els.viewGame.classList.toggle('hidden',which!=="game");els.viewOver.classList.toggle('active',which==="over");els.viewOver.classList.toggle('hidden',which!=="over");}function updateLetters(){const spans=[...els.letters.children];spans.forEach((s,i)=>{s.classList.toggle('lost',i<misses);});}function resetGameState(){misses=0;total=0;attempt=1;document.getElementById('scoreTop').textContent=total.toFixed(2);updateLetters();}function startSession(){currentSkill=parseInt(els.skill.value,10);if(!STATE.obstacles||STATE.obstacles.length===0){STATE.obstacles=DEFAULTS.obstacles.slice();}saveState(STATE);resetGameState();setView("game");nextTrick(true);}els.startBtn.addEventListener('click',startSession);function computeScore(c,a){if(!isValidCombo(c))return{valid:false,base:0,combo:1,attempt:0,final:0,breakdown:[]};let s=1.0,bd=[];const st=c.stance||"regular";s+=BASE_POINTS.stance[st]||0;bd.push(["stance",st,BASE_POINTS.stance[st]||0]);if(c.spin){s+=BASE_POINTS.spin[c.spin]||0;bd.push(["spin",c.spin,BASE_POINTS.spin[c.spin]||0]);}if(c.flip){s+=BASE_POINTS.flip[c.flip]||0;bd.push(["flip",c.flip,BASE_POINTS.flip[c.flip]||0]);}if(c.grind_slide){s+=BASE_POINTS.grind_slide[c.grind_slide]||0;bd.push(["grind_slide",c.grind_slide,BASE_POINTS.grind_slide[c.grind_slide]||0]);}if(c.manual){s+=BASE_POINTS.manual[c.manual]||0;bd.push(["manual",c.manual,BASE_POINTS.manual[c.manual]||0]);}if(c.obstacle){s+=BASE_POINTS.obstacle[c.obstacle]||0;bd.push(["obstacle",c.obstacle,BASE_POINTS.obstacle[c.obstacle]||0]);}let bonus=0;if(c.spin&&c.flip)bonus+=COMBO_BONUSES.spin_plus_flip;if(c.flip&&c.grind_slide)bonus+=COMBO_BONUSES.flip_into_grind;if(c.spin&&c.grind_slide)bonus+=COMBO_BONUSES.spin_into_grind;if(c.manual&&(c.flip||c.spin))bonus+=COMBO_BONUSES.manual_combo;s*=(1+bonus);const mult={1:1.00,2:0.94,3:0.92}[a]||0;const base=Math.max(s,0.1);return{valid:true,base:round(base,3),combo:round(1+bonus,3),attempt:mult,final:round(base*mult,3),breakdown:bd};}function round(x,n){const k=Math.pow(10,n);return Math.round(x*k)/k;}function prettyScore(r){if(!r.valid)return"Invalid combo for obstacle.";let lines=[`Base: ${r.base}`,`Combo x${r.combo}`,`Attempt x${r.attempt} => Final: ${r.final}`,"","Breakdown:"];for(const[k,n,p]of r.breakdown){lines.push(`  + ${k}:${n} = ${p}`);}return lines.join("\n");}function updateAttemptUI(){els.attemptBadge.textContent=`Attempt ${attempt}/3`;const rep=computeScore(current,attempt);els.attemptPoints.textContent=rep.valid?`This attempt: ${rep.final.toFixed(2)}`:`This attempt: —`;}function nextTrick(first=false){attempt=1;let tries=0;current=generateTrick(currentSkill);let text=describe(current);while((!text||text.trim()==="")&&tries<3){current=generateTrick(currentSkill);text=describe(current);tries++;}if(!text||text.trim()===""){current={stance:null,spin:null,spin_dir:null,flip:"kickflip",grind_slide:null,direction:null,manual:null,obstacle:"flat"};text="kickflip on flat";}els.trickText.textContent=text;updateAttemptUI();els.breakdown.open=false;els.nextBtn.classList.add('hidden');els.landBtn.disabled=false;els.missBtn.disabled=false;els.skipBtn.disabled=false;if(!first)window.scrollTo({top:document.body.scrollHeight,behavior:'smooth'});}function settle(landed){if(landed){const rep=computeScore(current,attempt);total+=rep.final;document.getElementById('scoreTop').textContent=total.toFixed(2);els.breakText.textContent=prettyScore(rep);els.breakdown.open=true;els.nextBtn.classList.remove('hidden');els.landBtn.disabled=true;els.missBtn.disabled=true;els.skipBtn.disabled=true;}else{if(attempt<3){attempt++;updateAttemptUI();}else{misses++;updateLetters();if(misses>=5){endSession();return;}els.nextBtn.classList.remove('hidden');els.landBtn.disabled=true;els.missBtn.disabled=true;els.skipBtn.disabled=true;}}}els.landBtn.addEventListener('click',()=>settle(true));els.missBtn.addEventListener('click',()=>settle(false));els.skipBtn.addEventListener('click',()=>{els.nextBtn.classList.add('hidden');nextTrick(false);});els.nextBtn.addEventListener('click',()=>nextTrick(false));function endSession(){setView("over");els.finalScore.textContent=total.toFixed(2);const best=Math.max(total,parseFloat(localStorage.getItem('bl_best')||"0"));localStorage.setItem('bl_best',String(best));els.bestScore.textContent=best.toFixed(2);}els.endBtn.addEventListener('click',endSession);els.restartBtn.addEventListener('click',()=>{setView("setup");});if('serviceWorker'in navigator){window.addEventListener('load',()=>navigator.serviceWorker.register('./sw.js'));}console.log("Brainlock loaded",VERSION);