const VERSION="0.4.8";
const STATE={obstacles:["flat","ledge","rail","manual pad","quarterpipe","bank","kicker","gap","stair","hubba","flatbar","handrail","curb","box","funbox"],stances:{regular:true,fakie:true,nollie:true,switch:true},cats:{flips:true,grinds:true,manuals:true,airs:true,spins:true},flips:{"kickflip":true,"heelflip":true,"varial kickflip":true,"varial heelflip":true,"hardflip":true,"inward heelflip":true,"bigspin flip":true,"bigspin heelflip":true,"tre flip":true,"360 flip":true,"laser flip":true},grinds:{"50-50":true,"5-0":true,"boardslide":true,"noseslide":true,"tailslide":true,"lipslide":true,"smith":true,"feeble":true,"willy":true,"salad":true,"crooked":true,"overcrook":true,"nosegrind":true,"noseblunt":true,"bluntslide":true},spins:{"180":true,"360":true,"540":true,"720":true}};
const MIN_SKILL={flips:{"kickflip":1,"heelflip":1,"varial kickflip":3,"varial heelflip":3,"hardflip":4,"inward heelflip":6,"bigspin flip":4,"bigspin heelflip":6,"tre flip":5,"360 flip":5,"laser flip":7},grinds:{"50-50":2,"5-0":2,"boardslide":3,"noseslide":3,"tailslide":4,"lipslide":3,"smith":3,"feeble":3,"willy":3,"salad":4,"crooked":5,"overcrook":6,"nosegrind":5,"noseblunt":6,"bluntslide":4},spins:{180:3,360:4,540:6,720:8},combos:{flipToGrind:5}};
const OB={GRIND_OK:new Set(["rail","handrail","flatbar","ledge","hubba","box","curb"]),SLIDE_OK:new Set(["rail","handrail","flatbar","ledge","hubba","box","curb"]),MANUAL_OK:new Set(["manual pad","box","funbox","kicker","bank"]),AIR_OK:new Set(["flat","gap","kicker","quarterpipe","bank","stair","funbox","rail","handrail","flatbar"])};
function isRail(o){return["rail","handrail","flatbar"].includes(o);}const PTS={stance:{regular:0,fakie:0.1,nollie:0.2,switch:0.3},spin:{180:0.2,360:0.4,540:0.6,720:0.8},flip:{"kickflip":0.3,"heelflip":0.35,"varial kickflip":0.45,"varial heelflip":0.5,"hardflip":0.55,"inward heelflip":0.6,"bigspin flip":0.6,"bigspin heelflip":0.65,"tre flip":0.8,"360 flip":0.8,"laser flip":0.9},grind:{"50-50":0.3,"5-0":0.4,"boardslide":0.4,"noseslide":0.45,"tailslide":0.5,"lipslide":0.55,"smith":0.6,"feeble":0.6,"willy":0.55,"salad":0.6,"crooked":0.65,"overcrook":0.75,"nosegrind":0.7,"noseblunt":0.9,"bluntslide":0.85},obstacle:{"flat":0,"manual pad":0.1,"box":0.1,"curb":0.15,"ledge":0.25,"hubba":0.35,"flatbar":0.35,"rail":0.45,"handrail":0.55,"gap":0.5,"kicker":0.1,"stair":0.45,"quarterpipe":0.4,"bank":0.25,"funbox":0.2},manual:{"manual":0.25,"nose manual":0.35,"one wheel manual":0.6},combo:{flipToGrind:0.25,spinPlusFlip:0.2,spinIntoGrind:0.15,manualCombo:0.15}};
function score(c,a){if(!c.valid)return{valid:false,final:0,base:0,combo:1,attempt:0,breakdown:[]};let s=1.0,bd=[];const st=c.stance||"regular";s+=PTS.stance[st]||0;bd.push(["stance",st,PTS.stance[st]||0]);if(c.spin){s+=PTS.spin[c.spin]||0;bd.push(["spin",c.spin,PTS.spin[c.spin]||0]);}if(c.flip){s+=PTS.flip[c.flip]||0;bd.push(["flip",c.flip,PTS.flip[c.flip]||0]);}if(c.grind){s+=PTS.grind[c.grind]||0;bd.push(["grind",c.grind,PTS.grind[c.grind]||0]);}if(c.manual){s+=PTS.manual[c.manual]||0;bd.push(["manual",c.manual,PTS.manual[c.manual]||0]);}s+=PTS.obstacle[c.obstacle]||0;bd.push(["obstacle",c.obstacle,PTS.obstacle[c.obstacle]||0]);let bonus=0;if(c.flip&&c.grind)bonus+=PTS.combo.flipToGrind;if(c.spin&&c.flip)bonus+=PTS.combo.spinPlusFlip;if(c.spin&&c.grind)bonus+=PTS.combo.spinIntoGrind;if(c.manual&&(c.flip||c.spin))bonus+=PTS.combo.manualCombo;s*=(1+bonus);const mult={1:1.00,2:0.94,3:0.92}[a]||0;return{valid:true,base:round(s,3),combo:round(1+bonus,3),attempt:mult,final:round(s*mult,3),breakdown:bd};}
function round(x,n){const k=Math.pow(10,n);return Math.round(x*k)/k;}function poolFor(skill){const s=skill|0;const pool={};pool.obstacles=STATE.obstacles.slice();pool.stances=Object.keys(STATE.stances).filter(k=>STATE.stances[k]);pool.flips=STATE.cats.flips?Object.keys(STATE.flips).filter(n=>STATE.flips[n]&&(MIN_SKILL.flips[n]||1)<=s):[];pool.grinds=STATE.cats.grinds?Object.keys(STATE.grinds).filter(n=>STATE.grinds[n]&&(MIN_SKILL.grinds[n]||1)<=s):[];pool.spins=STATE.cats.spins?[180,360,540,720].filter(sp=>STATE.spins[String(sp)]&&(MIN_SKILL.spins[sp]||1)<=s):[];pool.manuals=STATE.cats.manuals?["manual","nose manual","one wheel manual"]:[];return pool;}
function choose(arr){return arr[Math.floor(Math.random()*arr.length)];}
function validForObstacle(piece,obstacle){if(piece.type==="grind"){const name=piece.value;const isSlide=["boardslide","lipslide","tailslide","noseslide","bluntslide"].includes(name);if(isSlide)return OB.SLIDE_OK.has(obstacle);return OB.GRIND_OK.has(obstacle)||OB.SLIDE_OK.has(obstacle);}if(piece.type==="manual"){return OB.MANUAL_OK.has(obstacle);}if(piece.type==="flipOnly"){return OB.AIR_OK.has(obstacle);}return true;}
function generate(skill){const s=skill|0;const pool=poolFor(s);let attempts=0;while(attempts++<40){const obstacle=choose(pool.obstacles);const options=[];if(pool.flips.length&&OB.AIR_OK.has(obstacle))options.push("flipOnly");if(pool.grinds.length&&(OB.GRIND_OK.has(obstacle)||OB.SLIDE_OK.has(obstacle)))options.push("grindOnly");if(pool.manuals.length&&OB.MANUAL_OK.has(obstacle))options.push("manualOnly");if(pool.flips.length&&pool.grinds.length&&(MIN_SKILL.combos.flipToGrind<=s)&&(OB.GRIND_OK.has(obstacle)||OB.SLIDE_OK.has(obstacle)))options.push("flipToGrind");if(!options.length){continue;}const pattern=choose(options);const stances=pool.stances;const stance=(stances.length&&Math.random()<0.35)?choose(stances):null;let spin=null,spin_dir=null,flip=null,grind=null,manual=null,text="";if(pattern==="flipOnly"){flip=choose(pool.flips);const spPool=pool.spins.filter(sp=>sp<=540||s>=8);if(spPool.length&&Math.random()<0.3){spin=choose(spPool);spin_dir=(Math.random()<0.5?"frontside":"backside");}text=`${stance&&stance!=="regular"?stance+" ":""}${spin?(spin_dir?spin_dir+" ":"")+spin+" ":""}${flip} ${isRail(obstacle)?"over":"on"} ${obstacle}`;}else if(pattern==="grindOnly"){grind=choose(pool.grinds);const dirDefault={"50-50":"frontside","5-0":"frontside","boardslide":"backside","noseslide":"backside","lipslide":"frontside","tailslide":"frontside","bluntslide":"backside","nosegrind":"frontside","crooked":"backside","willy":"backside","feeble":"backside","smith":"backside","salad":"backside","overcrook":"backside","noseblunt":"frontside"};const dir=dirDefault[grind]||"frontside";if(!validForObstacle({type:"grind",value:grind},obstacle)){continue;}text=`${stance&&stance!=="regular"?stance+" ":""}${dir} ${grind} on ${obstacle}`;}else if(pattern==="manualOnly"){manual=choose(pool.manuals);if(!validForObstacle({type:"manual",value:manual},obstacle)){continue;}text=`${stance&&stance!=="regular"?stance+" ":""}${manual} on ${obstacle}`;}else if(pattern==="flipToGrind"){grind=choose(pool.grinds);if(!validForObstacle({type:"grind",value:grind},obstacle)){continue;}flip=choose(pool.flips.filter(n=>(MIN_SKILL.flips[n]||1)<=Math.max(s,MIN_SKILL.combos.flipToGrind)));text=`${stance&&stance!=="regular"?stance+" ":""}${flip} to ${grind} on ${obstacle}`;}const comp={stance,spin,spin_dir,flip,grind,manual,obstacle,valid:true,text};return comp;}return{stance:null,spin:null,spin_dir:null,flip:"kickflip",grind:null,manual:null,obstacle:"flat",valid:true,text:"kickflip on flat"};}
function describe(c){return c.text;}const els={titleText:document.getElementById('titleText'),skill:document.getElementById('skill'),skillVal:document.getElementById('skillVal'),viewSetup:document.getElementById('viewSetup'),viewGame:document.getElementById('viewGame'),viewOver:document.getElementById('viewOver'),startBtn:document.getElementById('startBtn'),trickText:document.getElementById('trickText'),letters:document.getElementById('letters'),attemptBadge:document.getElementById('attemptBadge'),attemptPoints:document.getElementById('attemptPoints'),breakText:document.getElementById('breakText'),breakdown:document.getElementById('breakdown'),landBtn:document.getElementById('landBtn'),missBtn:document.getElementById('missBtn'),skipBtn:document.getElementById('skipBtn'),nextBtn:document.getElementById('nextBtn'),endBtn:document.getElementById('endBtn'),finalScore:document.getElementById('finalScore'),restartBtn:document.getElementById('restartBtn'),scoreTop:document.getElementById('scoreTop')};
els.titleText.addEventListener('click',()=>location.reload());els.skill.addEventListener('input',e=>{els.skillVal.textContent=e.target.value;});
let misses=0,total=0,current=null,attempt=1,currentSkill=6;
function setView(v){els.viewSetup.classList.toggle('hidden',v!=="setup");els.viewGame.classList.toggle('hidden',v!=="game");els.viewOver.classList.toggle('hidden',v!=="over");}
function updateLetters(){const spans=[...els.letters.children];spans.forEach((s,i)=>s.classList.toggle('lost',i<misses));}
function reset(){misses=0;total=0;attempt=1;els.scoreTop.textContent=total.toFixed(2);updateLetters();}
function start(){currentSkill=parseInt(els.skill.value,10);reset();setView("game");next(true);}els.startBtn.addEventListener('click',start);
function updateAttemptUI(){els.attemptBadge.textContent=`Attempt ${attempt}/3`;const rep=score(current,attempt);els.attemptPoints.textContent=rep.valid?`This attempt: ${rep.final.toFixed(2)}`:"This attempt: â€”";}
function next(first=false){attempt=1;current=generate(currentSkill);els.trickText.textContent=describe(current);updateAttemptUI();els.breakdown.open=false;els.nextBtn.classList.add('hidden');els.landBtn.disabled=false;els.missBtn.disabled=false;els.skipBtn.disabled=false;if(!first)window.scrollTo({top:document.body.scrollHeight,behavior:'smooth'});}
function settle(landed){if(landed){const rep=score(current,attempt);total+=rep.final;els.scoreTop.textContent=total.toFixed(2);els.breakText.textContent=`Base: ${rep.base}\nCombo x${rep.combo}\nAttempt x${rep.attempt} => Final: ${rep.final}`;els.breakdown.open=true;els.nextBtn.classList.remove('hidden');els.landBtn.disabled=true;els.missBtn.disabled=true;els.skipBtn.disabled=true;}else{if(attempt<3){attempt++;updateAttemptUI();}else{misses++;updateLetters();if(misses>=5){end();return;}els.nextBtn.classList.remove('hidden');els.landBtn.disabled=true;els.missBtn.disabled=true;els.skipBtn.disabled=true;}}}
els.landBtn.addEventListener('click',()=>settle(true));els.missBtn.addEventListener('click',()=>settle(false));els.skipBtn.addEventListener('click',()=>{els.nextBtn.classList.add('hidden');next(false);});els.nextBtn.addEventListener('click',()=>next(false));function end(){setView("over");document.getElementById('finalScore').textContent=total.toFixed(2);}els.endBtn.addEventListener('click',end);els.restartBtn.addEventListener('click',()=>{setView("setup");});
console.log("Brainlock loaded",VERSION);